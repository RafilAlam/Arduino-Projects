/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 27.12.2024 10:09:26

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242576;
#else
constexpr int kTensorArenaSize = 241552;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0037829605862498283, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { 43951, -41713, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00011013490438926965, 0.00011639703734545037, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 55,-57,-68,127,-85,-7,-73,58,113,-48,-43,-31,-32,71,-75,18,103,-105,-29,-119,95,65,62,-87,-47,-98,-71,108,21,-85,-28,56, 
  /* [1][0][][] */ 53,89,82,-66,-71,87,0,22,-30,-6,30,109,121,43,46,12,-30,15,-85,-86,-71,48,46,127,72,79,-37,-16,94,-105,-122,-5, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0031824896577745676, 0.0033634421415627003, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 19, 877, 762, -286, -1217, 860, -1064, 696, -1153, -958, 145, -130, 620, 454, 538, -1403, -959, -93, 1769, -877, -1076, 945, 909, 947, -1404, 182, -1229, 126, -1434, -833, 1044, -1237, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.5685486838920042e-05, 4.2537314584478736e-05, 4.7273788368329406e-05, 4.3534648284548894e-05, 4.0740007534623146e-05, 4.3428222852526233e-05, 4.0727198211243376e-05, 4.1144845454255119e-05, 4.5485227019526064e-05, 4.0805636672303081e-05, 4.2509356717346236e-05, 4.2500814743107185e-05, 4.3598451156867668e-05, 4.0331069612875581e-05, 4.1168619645759463e-05, 4.1829352994682267e-05, 4.9791240599006414e-05, 4.7548317525070161e-05, 4.5380609662970528e-05, 4.7930912842275575e-05, 4.8301040806109086e-05, 3.8416925235651433e-05, 4.2448300519026816e-05, 4.2038904211949557e-05, 4.1761366446735337e-05, 4.2979150748578832e-05, 4.7326524509117007e-05, 4.5888951717643067e-05, 4.2590039811329916e-05, 4.6035645937081426e-05, 4.3224386899964884e-05, 4.7752684622537345e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -66,-45,81,13,80,-27,-70,-121,33,-113,-127,-4,32,-21,-56,25,-29,-26,-89,-32,-68,-120,8,101,-77,-4,70,-29,89,-31,-35,-85,64,-74,-75,39,-78,-61,-114,-6,22,-56,-67,81,56,-72,79,-4,13,-80,-23,93,-58,-80,-80,81,18,50,96,-125,-51,54,-82,40,-2,-2,40,60,16,91,66,-109,73,-72,4,77,-70,30,-54,30,48,9,86,8,-90,-20,-84,94,8,95,-8,-90,-1,23,3,29, 
  /* [1][0][][] */ -86,37,-46,19,-16,65,37,8,93,-118,-95,92,61,-21,12,59,117,-27,19,127,-22,-19,57,49,55,8,-14,115,25,-15,83,-95,64,64,10,15,67,70,-15,-86,-94,29,6,-69,-7,56,-14,-23,-17,-105,116,68,28,24,-74,-31,17,95,74,26,-28,83,-86,-55,-28,33,56,11,81,50,37,20,-95,102,-51,59,97,-12,-14,86,-47,85,-22,-86,13,121,-45,-39,76,88,96,33,57,39,40,14, 
  /* [2][0][][] */ 3,36,-35,91,-2,-50,68,73,-56,40,-36,85,74,-10,56,-85,-24,-14,16,65,-58,-25,109,39,3,44,100,27,-40,45,58,36,-44,-39,-55,-97,-47,88,79,-48,-127,-40,33,7,-45,112,-8,-39,80,1,84,-54,-20,6,1,25,-80,81,-29,-38,6,30,-53,64,89,38,28,41,-81,75,26,-46,28,-38,16,37,-19,5,23,28,48,-66,13,-23,-9,-57,-3,-10,76,103,-5,14,-57,-100,-22,-36, 
  /* [3][0][][] */ 93,-7,37,-26,-67,40,-64,82,37,65,105,48,86,91,80,50,79,88,-39,2,91,-28,-64,-107,-30,-71,-76,81,30,-44,78,56,-46,-14,-20,-4,-86,-7,84,89,29,-85,-92,50,52,16,-46,-79,54,-22,29,47,77,74,124,-91,-49,-81,-105,-1,-85,79,-12,63,39,-35,-13,23,-15,-69,-4,122,67,-92,96,-42,17,71,75,-62,-83,-108,23,127,75,29,-1,-73,-50,34,-7,-43,126,-32,-75,42, 
  /* [4][0][][] */ 83,79,-12,24,-44,-24,51,62,32,110,-8,83,26,-26,1,-54,-33,18,-13,-12,74,-38,53,1,-39,13,40,-65,-53,74,-34,-16,54,110,6,-84,-73,-25,-54,75,-1,-82,-87,-95,8,72,28,27,68,0,-37,-83,-106,90,-25,14,58,-62,-3,56,-18,-52,-3,-56,-65,40,49,-8,21,-113,-108,-78,-24,-2,111,23,32,-32,-28,-74,-18,-58,-99,-36,47,38,74,-18,-127,-94,19,67,63,110,-106,-34, 
  /* [5][0][][] */ 45,-69,79,89,49,-100,27,47,111,-127,-7,-57,23,83,21,34,74,59,-74,106,45,28,38,1,-63,-61,7,-55,55,7,10,-122,-22,-24,-42,5,-75,-14,36,-11,-114,-22,58,95,-7,43,39,-21,-88,57,37,43,50,-33,23,-9,84,50,-26,-79,47,-74,3,-48,-6,87,-32,0,53,25,107,-48,-38,85,-32,-43,32,-15,30,92,110,45,45,104,-79,88,7,48,65,-66,113,86,-30,-18,76,-52, 
  /* [6][0][][] */ 47,-35,82,50,-93,-31,-20,41,-31,-44,-12,-96,59,31,87,-124,19,24,21,73,-88,-124,79,34,-73,-90,-26,-70,-42,-119,25,-85,-99,-74,-58,-112,-26,17,-115,96,73,32,3,-32,-119,76,-97,-59,-71,32,-42,-77,35,-42,66,-42,-11,-25,-78,127,-104,-16,67,-82,-64,74,72,-61,54,-23,-112,-22,32,-80,-99,-55,-90,-109,-69,-44,12,-42,21,-42,-82,-96,-54,-103,57,66,67,-3,-64,-31,50,-43, 
  /* [7][0][][] */ 68,79,-21,-23,-53,97,-17,0,127,-27,-91,8,46,-81,31,68,65,23,-6,122,66,16,15,97,-38,82,53,72,-59,78,-22,6,26,-2,69,78,-75,89,-12,-54,52,-48,98,75,66,21,90,-78,53,-72,-83,-42,-9,42,8,27,94,-76,19,-93,29,-22,54,-92,-45,-44,52,-1,-107,39,74,85,73,38,44,71,-33,72,-69,60,99,-30,4,-51,64,50,-93,101,78,23,88,65,-67,-73,8,-41, 
  /* [8][0][][] */ 50,15,-54,-95,25,41,-75,-32,-19,58,23,67,-15,-52,-78,-73,-80,63,-58,-12,-1,-15,40,65,-120,79,12,35,-79,1,-69,127,56,2,14,-12,71,-19,-32,88,108,58,-112,-112,-32,-49,-41,63,12,-45,-76,-20,-72,37,-35,-110,25,71,-97,124,68,39,35,69,-51,-46,-31,85,-84,18,2,-19,47,33,-4,-4,-64,59,41,34,6,44,-115,-87,11,9,42,-53,11,-54,-93,64,-66,-68,-61,29, 
  /* [9][0][][] */ 42,15,84,22,58,-54,-59,-108,17,86,-25,37,-35,-80,-68,-44,-12,9,-47,-82,-15,105,-117,-113,81,9,-30,4,-23,-17,-63,104,40,35,9,-24,-89,-6,-50,-3,85,-81,29,-104,56,-2,-106,28,50,33,-92,-64,47,-25,-80,85,62,-68,-34,35,-100,91,119,-85,-97,31,84,34,-15,71,78,-100,-10,52,-111,-105,-90,-127,-55,74,11,19,71,5,-55,-104,13,-35,71,9,-45,81,99,20,35,-52, 
  /* [10][0][][] */ -90,49,80,-44,-9,61,95,-9,46,-4,2,-65,73,58,-63,-22,-13,68,-96,-34,-17,10,66,-41,49,36,-95,-87,-39,23,-95,-96,75,49,105,51,-20,19,-53,2,-70,115,-77,-37,-71,-38,-5,-38,4,-30,34,26,60,-29,-68,-33,-92,-26,40,-80,10,32,67,40,110,-91,-127,-47,-21,4,-71,-60,55,78,-97,101,6,80,59,28,77,1,64,102,-113,73,92,-12,27,11,-9,-61,-65,-77,-30,-41, 
  /* [11][0][][] */ 55,11,-18,94,102,15,49,-12,80,45,-106,91,-43,-111,-15,-98,-35,-118,21,43,9,29,13,-86,-77,-97,-44,70,66,-46,8,-46,-83,-100,23,30,-52,70,-66,-82,-57,106,-55,-35,-40,-43,-106,-71,35,56,95,62,-82,-120,10,-7,-53,-74,-31,-116,-108,37,29,8,23,58,-88,7,46,62,-92,-95,-3,99,-127,56,-57,45,-63,62,-89,-23,-65,-23,-3,-69,-2,-23,-103,-20,5,-98,-86,-70,-78,-22, 
  /* [12][0][][] */ -24,61,-36,19,89,1,-26,30,-51,20,-28,13,-41,-1,31,-71,-60,-19,-52,-44,35,-39,37,106,-34,-48,104,-64,92,-5,-34,59,-65,-85,-24,2,19,-47,-23,7,57,54,-70,-22,5,-49,-27,119,-34,-127,-49,104,47,-45,-76,79,-25,-40,64,12,68,80,-31,58,112,27,-46,75,38,109,51,69,69,117,-31,11,-7,56,-83,-60,-29,94,61,25,-77,46,52,113,-80,-76,87,44,71,-50,39,80, 
  /* [13][0][][] */ 62,-72,103,102,87,78,76,27,85,-126,5,-34,79,64,49,-54,-92,-58,-76,45,75,-40,123,-26,-37,23,16,30,-78,-127,54,5,43,64,-12,21,-59,-10,16,31,-97,84,-30,23,-23,45,-6,-10,35,59,-26,-76,-79,-20,86,-77,-44,26,-5,-112,-5,79,-93,17,-38,-83,-100,59,-50,8,102,9,-87,55,-83,-23,-75,85,89,-42,61,-90,105,35,-87,-74,94,125,-4,-34,-68,56,88,-81,76,14, 
  /* [14][0][][] */ -88,-98,92,80,80,-67,-7,-99,-52,-63,60,75,-22,-73,-96,-69,-21,-56,-17,43,-32,22,19,77,-80,-78,-14,46,-98,-122,-85,16,105,-54,-19,-8,104,121,28,-127,-42,-79,51,96,84,-79,68,-57,89,4,74,67,101,-61,-14,15,-41,18,62,41,3,-85,-72,74,-68,-22,60,-111,-104,-58,-63,94,13,95,41,-49,71,-70,62,48,58,-16,-86,-17,-103,-64,-84,112,105,21,86,-33,65,64,-4,74, 
  /* [15][0][][] */ 19,-33,-46,40,51,-88,30,-103,29,7,-81,-8,69,-23,-104,-117,48,-7,-87,-6,15,1,36,69,42,35,7,55,-11,27,23,-64,-19,7,-83,-30,-82,77,77,-37,27,69,-68,-39,-5,-95,-68,-95,-20,-59,-32,8,-110,-72,-64,-39,40,26,-64,109,-61,-76,-4,65,-60,75,-82,-6,-79,-20,29,-83,-2,-34,33,-116,-29,20,67,42,-96,17,-121,-73,-123,-58,-101,13,54,37,-127,-54,29,121,-117,77, 
  /* [16][0][][] */ -18,-7,61,-65,12,85,-47,27,16,61,-78,47,-21,-42,-35,-49,57,51,60,24,62,70,-53,16,-47,45,-71,27,-92,24,28,46,-91,80,21,47,-46,22,-38,-23,54,-55,30,54,26,55,53,-31,-45,-55,-13,66,-49,127,52,13,21,55,30,50,66,94,49,31,19,6,-21,89,35,49,-45,-18,17,47,50,47,-30,48,-100,-31,-10,-79,21,-4,14,54,59,-8,46,-8,-28,72,63,12,-80,2, 
  /* [17][0][][] */ 27,-80,3,78,-14,-95,-53,-110,22,-59,31,43,96,48,-75,9,52,35,85,108,-79,-23,33,-21,23,43,-42,28,105,-85,-28,28,-13,-38,46,-32,-34,84,-100,-28,-106,-23,3,-25,27,10,88,-86,66,89,-21,3,-8,16,39,-31,-127,73,-55,-121,12,-95,29,79,-45,-55,3,-111,-89,17,102,10,-4,-79,-86,32,95,-14,28,-41,16,16,-47,-94,-122,62,76,-44,-18,38,-59,-97,-43,35,23,-1, 
  /* [18][0][][] */ -43,121,127,-27,25,-47,-51,45,36,85,-43,-11,1,58,80,-5,52,11,67,8,123,-9,44,-35,60,-49,20,127,57,70,34,69,66,12,-56,-44,11,53,13,77,2,36,-11,30,-57,54,45,35,52,6,97,65,-56,36,42,97,7,58,12,-53,110,123,52,59,-23,-57,16,111,92,-40,-28,117,-42,-11,-28,-41,83,66,39,-20,-13,23,5,-13,125,13,85,94,-46,-21,-13,117,109,-12,69,14, 
  /* [19][0][][] */ 55,64,43,14,30,-28,59,54,56,-5,8,-22,-84,15,-38,31,41,-90,122,29,-30,69,-57,-5,43,-57,7,-65,-82,-102,-63,43,48,-21,11,-11,-8,-67,-57,-33,71,-103,-77,-7,-80,8,46,-86,1,70,-45,19,-41,53,-10,-19,5,60,-17,20,27,-53,117,32,-68,38,-34,-10,-13,26,42,-53,-61,-105,-56,-75,-32,-100,-3,66,29,-99,-37,44,-78,-20,-8,-18,53,8,-17,34,-34,127,38,-51, 
  /* [20][0][][] */ 30,45,36,52,-86,64,0,32,-8,37,-73,-7,-18,60,37,-67,-60,-47,-48,-45,-2,-15,-79,-75,37,-57,-99,16,-1,16,-47,113,60,56,-31,36,11,-39,-22,-53,-23,-47,-88,-92,-40,-69,-69,58,37,-49,-96,15,16,127,28,-19,63,39,54,104,65,-41,-37,-44,-42,-56,-46,19,-67,-78,-71,45,-60,-80,17,-4,61,36,62,61,44,-14,42,-33,43,68,-26,40,2,54,3,35,17,49,-21,-12, 
  /* [21][0][][] */ 63,80,85,-77,108,-71,75,20,22,-84,-71,41,7,40,-55,-81,-75,-21,16,12,122,-57,92,-54,80,-87,-9,93,29,-14,-9,-52,17,-6,-71,-114,127,108,-112,-64,-37,30,52,1,-70,-53,-70,112,-13,-96,12,101,52,15,-91,32,-51,58,-28,65,75,-89,-16,1,98,42,-39,-89,-109,22,77,85,32,1,61,84,-81,-1,81,123,34,103,56,-53,15,-70,71,-61,-91,94,118,-97,-48,-112,79,-9, 
  /* [22][0][][] */ -3,-36,-46,-64,91,-43,98,34,-58,49,-58,-95,98,-96,-109,-62,55,88,-93,-29,98,-82,50,50,104,-20,-79,109,-38,-95,-56,-127,49,34,30,0,24,3,-47,-127,-31,13,25,99,71,-75,80,5,-46,-101,23,4,-37,-121,-42,33,-30,-21,0,-66,119,-76,-79,-86,-38,31,-123,-77,91,113,-2,13,-57,26,51,-56,64,-21,78,103,113,-81,-43,-83,65,95,94,-8,-37,50,-41,61,-21,-11,-11,107, 
  /* [23][0][][] */ 18,-70,19,71,101,-100,12,-84,71,-101,72,68,21,-91,9,-30,100,-17,-103,112,99,-85,115,-5,11,-18,93,41,77,24,62,-59,-21,14,35,22,106,11,-98,-25,-121,23,33,-80,-38,-55,110,46,72,-127,-60,-27,89,-102,-47,90,-75,-7,107,-7,-76,-93,-74,5,50,36,-107,-117,47,12,119,-50,-2,-8,-40,-64,63,7,102,123,-25,-32,42,-76,71,27,112,-2,-70,55,107,5,80,-85,-11,92, 
  /* [24][0][][] */ -92,-74,-118,-86,-102,-118,-85,-102,28,79,47,19,74,28,-63,-127,-96,13,0,-74,54,-96,-74,-59,16,-52,37,21,65,19,-20,-79,-30,-17,17,-4,-76,-100,30,-40,-89,-112,62,-22,-8,-62,15,35,-94,-64,-49,-14,37,25,36,-88,-33,44,0,-22,51,-30,4,60,-114,56,-67,-105,-117,24,-79,-48,-58,12,59,60,24,-95,-120,-102,-97,-107,-82,-126,-21,26,-36,-113,-5,-124,-23,-93,-43,-5,-109,0, 
  /* [25][0][][] */ -101,-37,-71,-5,80,-56,-99,6,45,-120,-79,-20,49,-16,-107,-45,-50,43,-13,-86,62,32,-2,-41,21,-64,-86,43,69,-117,32,82,70,-99,38,48,80,-79,-62,-42,-110,93,-80,-14,94,46,38,37,-98,36,-57,-42,36,-63,-93,1,-38,22,-92,40,108,9,16,34,6,73,-57,-25,-88,4,-19,-126,10,-127,22,25,71,72,19,23,48,45,-34,30,-105,-33,-111,-120,-30,-33,93,-7,-121,-28,-59,-91, 
  /* [26][0][][] */ 48,-99,-35,-32,-98,-10,-29,-24,-104,-91,69,53,-80,-55,-13,-26,66,8,-60,-74,-12,47,54,-12,17,32,-12,15,-11,-9,-90,27,-43,-50,-99,-99,-72,49,-52,125,-38,56,21,9,-76,35,-52,57,-24,61,-25,61,-12,2,-16,-103,61,32,23,57,-18,-85,55,-38,66,-24,-57,42,-85,39,45,59,48,-92,-78,-15,13,-106,-97,-15,-44,36,42,-73,53,-19,-50,-5,-80,67,-13,-2,-58,127,19,50, 
  /* [27][0][][] */ 42,1,-28,-86,-94,-51,-28,34,30,105,77,-59,-8,64,81,23,45,18,72,-79,-75,39,-36,-29,-91,64,-92,-10,48,70,-12,30,74,76,-68,-43,-80,-23,-44,95,-37,10,11,42,70,12,57,80,111,80,47,-15,-71,-22,43,-15,127,6,-101,-17,-47,-17,18,57,22,-38,-40,124,52,-6,-101,36,85,-23,40,-62,29,-68,69,78,62,-23,85,-2,-11,-73,0,64,-15,1,-27,-13,87,42,94,82, 
  /* [28][0][][] */ 48,-32,57,11,-125,-83,-113,-90,-38,-118,22,37,-97,-100,-18,57,51,65,-85,38,-35,0,-120,-88,-105,41,-100,-78,-86,-89,-29,-46,-113,-15,42,37,0,-117,-63,-2,60,7,-102,15,-116,-36,-11,14,-7,-80,-88,-53,-101,-7,16,6,22,-40,43,16,-29,-65,-111,-25,24,35,-46,40,-93,-4,-116,-63,30,16,-34,-114,-127,-63,-93,23,-87,-102,68,-45,22,-122,27,-82,-110,-64,-58,-84,-59,27,-94,-82, 
  /* [29][0][][] */ 83,36,30,-57,-82,36,-86,36,59,17,-71,-70,79,-85,-18,-38,-96,112,65,-70,-78,-13,25,-14,-49,37,-47,-44,-96,41,105,40,28,36,-74,-36,-25,68,0,115,84,67,-55,54,-21,63,-49,-36,60,37,31,-88,43,-33,108,32,-43,41,-54,127,-109,82,-28,-46,-65,-49,55,90,113,-85,10,-64,81,47,55,5,69,-69,-41,7,-21,-73,-21,-65,52,71,22,48,-42,61,40,51,-77,35,-14,33, 
  /* [30][0][][] */ 43,-34,-21,49,-68,47,-37,18,125,1,30,-24,-66,34,69,39,17,56,92,-69,69,-67,-80,25,-68,38,-46,127,5,-70,-65,27,-54,-38,-82,-11,30,4,24,29,92,-43,8,105,113,-8,103,82,-42,81,39,-68,92,-17,21,105,-45,-32,-57,-19,-63,20,-35,-8,-76,-40,-53,112,-30,111,58,-16,-52,105,68,-39,-21,-49,-37,-15,44,40,-73,3,-55,53,-78,118,-1,-70,96,62,-3,30,16,-38, 
  /* [31][0][][] */ 78,-80,9,55,18,42,-48,-92,-44,3,-75,-80,59,-110,-51,67,-68,-86,20,16,27,64,-46,59,13,-92,6,11,-74,-73,17,124,-2,17,-92,-18,53,-41,-67,-46,80,-75,-46,9,-16,-63,-52,-3,45,55,51,-37,-110,-4,-76,-1,-53,36,-17,127,-50,-9,60,-80,32,78,-51,-21,38,-114,-114,-8,-88,-51,-12,-17,-66,-58,16,47,-80,-49,22,41,31,55,-88,-3,-5,-61,-86,-56,47,119,-23,-38, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0022836080752313137, 0.0021262452937662601, 0.0023630000650882721, 0.0021760975942015648, 0.0020364061929285526, 0.0021707778796553612, 0.0020357659086585045, 0.0020566422026604414, 0.0022735979873687029, 0.0020396867766976357, 0.0021248478442430496, 0.0021244208328425884, 0.0021792866755276918, 0.0020159652922302485, 0.0020578305702656507, 0.0020908575970679522, 0.0024888359475880861, 0.0023767224047333002, 0.002268368611112237, 0.0023958466481417418, 0.0024143476039171219, 0.0019202859839424491, 0.0021217959001660347, 0.0021013321820646524, 0.0020874592009931803, 0.0021483306773006916, 0.0023656359408050776, 0.0022937783505767584, 0.002128880936652422, 0.0023011108860373497, 0.0021605889778584242, 0.0023869378492236137, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 1199, -167, 3022, 7258, 5082, -2779, 4112, -1935, -3278, -448, 6007, -2698, 4724, 5892, 2283, 2949, -1108, -795, -1413, 6495, 2261, -590, 2442, -924, -1701, 3425, 1828, 2350, 5921, 2920, 5121, 1779, 1860, 6265, 5683, 3381, -450, 4569, 3456, -4171, -131, 1025, 233, 2396, -1986, 210, -1366, 631, -9640, 2629, 1426, -5535, 5651, -351, 1987, 2094, 1192, 2958, -831, -1764, 36, 1891, 720, 4537, 5645, 4320, 2743, 5789, 4301, -833, 3303, 5088, 3494, -1915, 5966, 6681, 585, -5263, 667, 1273, 9422, 2138, -1067, -3295, 1461, 410, 1405, -3293, 4195, -1049, 3887, 1316, 104, -2685, -246, 1273, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00010829022357938811, 0.00015240113134495914, 0.00017078068049158901, 0.00010530283907428384, 0.00012892615632154047, 0.00015037272532936186, 0.00014199173892848194, 0.00015080270532052964, 0.0001379704917781055, 0.00019746247562579811, 0.00011180662113474682, 0.00016877260350156575, 0.00012013578816549852, 9.7348922281526029e-05, 0.00014238219591788948, 0.00012914832041133195, 0.00017896226199809462, 0.0001380375906592235, 0.00016901572234928608, 9.9750315712299198e-05, 0.00018425323651172221, 0.00016896866145543754, 0.0001583249686518684, 0.00013593951007351279, 0.0001620940602151677, 0.00017066762666217983, 0.00017210713122040033, 0.00012531992979347706, 0.00012516154674813151, 0.00014650357479695231, 0.00010694851516745985, 0.00014634133549407125, 0.00013438324094749987, 0.00010086318798130378, 0.00010326736082788557, 0.00013638674863614142, 0.00019237223023083061, 9.8656513728201389e-05, 0.00013637328811455518, 0.00011101883137598634, 0.00016470544505864382, 0.0001533750764792785, 0.00024761838722042739, 9.9897457403130829e-05, 0.00013921617937739938, 0.00011711558909155428, 0.00016155639605131, 0.00012710424198303372, 7.6290365541353822e-05, 0.00010972826567012817, 0.0001944929244928062, 0.0001036442699842155, 0.00013462065544445068, 0.00020725654030684382, 0.00016404227062594146, 0.00013144314289093018, 0.0001438946055714041, 0.0001178257298306562, 0.00019062659703195095, 0.00013394365669228137, 0.00014546410238835961, 0.00012597098248079419, 0.00017205254698637873, 0.00012820541451219469, 0.00012110646639484912, 0.00011018459190381691, 0.00015694939065724611, 0.00011709517275448889, 0.0001586197322467342, 0.0001417282473994419, 0.0001525726547697559, 0.00013440713519230485, 0.00011703786003636196, 0.00011139790876768529, 0.00012190084817120805, 0.00010767111234599724, 0.00011179772991454229, 0.00012677122140303254, 0.00015983739285729825, 0.00014536640082951635, 8.4676401456817985e-05, 0.0001438152976334095, 0.00015823144349269569, 0.00014159674174152315, 0.00017515661602374166, 0.00011617901327554137, 0.00019797605636995286, 0.00013261286949273199, 0.00013782527821604162, 0.00014436831406783313, 0.00016198132652789354, 0.00014239977463148534, 0.00015734336921013892, 0.00012335163773968816, 0.00019433815032243729, 0.00013603158004116267, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ 4,122,-118,22,85,-17,109,61,-69,-20,21,-99,73,127,-98,40, 
  /* [1][0][][] */ -15,12,-69,-34,-15,59,18,-127,26,-57,-36,-65,-23,-60,-53,12, 
  /* [2][0][][] */ -19,-14,20,57,14,50,-104,127,-33,-12,60,-64,-16,-51,-32,66, 
  /* [3][0][][] */ 87,-120,99,6,15,-56,-14,127,-15,65,82,72,-8,48,2,-6, 
  /* [4][0][][] */ -44,-39,6,63,-71,-5,-29,-127,17,3,50,3,37,35,111,103, 
  /* [5][0][][] */ 127,33,-30,-29,-86,31,44,79,5,-16,56,83,113,37,-79,15, 
  /* [6][0][][] */ 10,-44,-48,-43,-55,-5,-17,-50,-35,-51,-16,41,77,41,127,-25, 
  /* [7][0][][] */ -51,44,-42,-91,22,-51,-88,27,-111,45,-68,-78,-127,-32,25,83, 
  /* [8][0][][] */ 48,50,64,3,44,29,83,1,63,-36,44,0,-127,-18,-86,4, 
  /* [9][0][][] */ -40,55,32,-35,-28,-10,31,-7,-29,50,-29,9,45,127,28,31, 
  /* [10][0][][] */ 94,38,-34,64,-23,-30,41,-43,-57,-44,-69,-75,-127,-82,32,100, 
  /* [11][0][][] */ 63,0,62,7,4,-38,3,100,-77,23,-32,9,-28,-16,50,127, 
  /* [12][0][][] */ -52,-29,14,11,34,-12,127,37,-42,27,10,0,-15,61,-53,96, 
  /* [13][0][][] */ 34,67,21,45,90,77,84,103,-61,104,-98,-87,57,127,-107,-35, 
  /* [14][0][][] */ -127,102,17,0,15,-7,75,-19,-18,39,113,14,-106,3,-64,48, 
  /* [15][0][][] */ -2,-7,-127,-53,71,-32,-77,-26,-33,-27,-26,-74,-8,-70,-44,37, 
  /* [16][0][][] */ 108,-5,-4,-25,32,-18,60,-16,-52,1,127,38,47,16,-50,34, 
  /* [17][0][][] */ 29,33,-43,-123,-25,-55,113,-127,-14,-37,-65,21,38,96,1,64, 
  /* [18][0][][] */ 22,108,-8,-36,73,-64,-19,-46,-40,127,-21,-12,-20,61,-25,-21, 
  /* [19][0][][] */ -55,-127,109,-65,19,-114,45,-39,62,21,88,113,19,11,63,-21, 
  /* [20][0][][] */ 3,77,49,3,3,0,16,-8,54,-15,69,-23,-127,-31,-51,7, 
  /* [21][0][][] */ -74,42,20,19,64,41,61,30,-127,70,-28,17,-11,31,-59,-39, 
  /* [22][0][][] */ 5,-91,51,24,23,-127,91,2,28,-34,-25,-52,37,-60,-32,-49, 
  /* [23][0][][] */ -73,-100,46,64,28,-23,20,-56,22,-33,97,7,23,72,77,127, 
  /* [24][0][][] */ -6,6,17,68,53,25,-49,-127,52,14,-49,8,4,9,-31,-34, 
  /* [25][0][][] */ -22,42,14,-54,-47,-4,19,-31,-29,56,-55,-18,50,127,14,18, 
  /* [26][0][][] */ -76,74,17,31,24,-110,-6,-40,30,34,20,93,13,-7,-77,127, 
  /* [27][0][][] */ -6,-120,-67,-7,-73,113,11,-53,12,-54,49,-46,25,-50,-127,-15, 
  /* [28][0][][] */ -41,-9,48,90,37,-1,-40,-127,-103,59,111,-1,69,1,-40,-30, 
  /* [29][0][][] */ -125,88,-11,-18,-40,10,-127,-78,-29,-21,1,10,12,-68,-110,53, 
  /* [30][0][][] */ 57,63,-45,89,-118,-110,-86,-27,-26,4,15,-100,127,16,-10,90, 
  /* [31][0][][] */ 127,44,-79,-44,-63,26,125,59,-71,-15,70,43,65,14,-43,29, 
  /* [32][0][][] */ -40,-8,127,-14,-39,95,94,17,-36,-36,-26,10,18,90,55,63, 
  /* [33][0][][] */ 6,45,-79,-61,-24,53,102,44,-20,-23,20,-76,105,127,-38,73, 
  /* [34][0][][] */ -69,-5,70,0,3,-32,101,6,-127,18,16,-55,47,68,-41,-27, 
  /* [35][0][][] */ 14,13,-60,15,-88,127,-50,-25,-12,116,4,105,-79,82,24,24, 
  /* [36][0][][] */ -24,-84,127,-48,-55,11,-29,-18,26,30,-47,89,17,-88,-49,38, 
  /* [37][0][][] */ 102,-20,76,-31,108,-95,-53,29,-57,127,-70,11,-111,-60,106,-26, 
  /* [38][0][][] */ 18,23,34,-74,17,-61,-87,42,-56,75,-91,-30,-73,-127,-122,65, 
  /* [39][0][][] */ -82,16,-52,-25,-88,-78,76,17,-127,-29,26,75,46,-1,0,56, 
  /* [40][0][][] */ 127,46,12,-104,-90,4,20,-54,-45,-16,-48,-108,40,49,39,74, 
  /* [41][0][][] */ 100,-64,-72,-57,-17,7,-68,-29,44,-31,-5,-67,127,-58,49,-42, 
  /* [42][0][][] */ -27,-88,-24,127,14,-92,-82,8,19,4,4,48,-67,54,-61,1, 
  /* [43][0][][] */ -74,-36,-55,-126,-63,10,8,61,29,-127,-47,24,-9,-40,-46,83, 
  /* [44][0][][] */ -25,59,19,-62,-43,-4,14,127,96,-96,62,87,119,70,-19,14, 
  /* [45][0][][] */ 48,97,-99,79,127,-75,-58,-67,93,-90,67,-87,-30,23,-91,70, 
  /* [46][0][][] */ -26,-51,22,4,95,-34,43,12,5,127,-15,-98,33,50,-61,66, 
  /* [47][0][][] */ 79,-30,-41,-23,81,-4,-50,-57,-15,127,-37,23,-3,-103,-83,15, 
  /* [48][0][][] */ 19,34,-23,-127,-9,-41,101,-106,-3,-8,-45,38,40,66,-4,46, 
  /* [49][0][][] */ -59,118,-42,79,75,-79,98,44,-23,52,72,-98,-16,116,127,-101, 
  /* [50][0][][] */ 15,36,-16,10,-127,-10,-76,-65,68,78,40,42,-44,-55,-1,30, 
  /* [51][0][][] */ 127,-27,-55,-22,-48,86,-77,-41,42,-28,-38,51,-22,-72,-9,42, 
  /* [52][0][][] */ -31,-68,58,78,-21,-127,-94,-13,-24,-32,-11,-42,15,-81,2,55, 
  /* [53][0][][] */ 5,84,79,-99,26,127,113,-27,11,-1,9,-31,105,-116,9,30, 
  /* [54][0][][] */ 31,127,-4,-30,-16,-74,-90,53,-9,-33,-50,108,82,95,5,63, 
  /* [55][0][][] */ -55,-31,67,43,65,-49,115,74,-66,4,35,27,127,35,-13,-9, 
  /* [56][0][][] */ 120,34,10,21,-58,127,-47,-93,-32,75,-93,-4,-47,117,-18,47, 
  /* [57][0][][] */ -50,-23,-56,-39,-78,-80,74,-32,-127,-34,45,41,30,48,-17,29, 
  /* [58][0][][] */ 49,-65,71,31,21,-78,-17,4,38,-7,-127,-18,26,-35,-38,44, 
  /* [59][0][][] */ 70,13,-117,120,2,44,101,-11,-98,-27,42,-118,-99,-52,51,127, 
  /* [60][0][][] */ 11,44,-23,11,-29,-16,-24,5,-51,-95,55,123,-43,-127,-42,-11, 
  /* [61][0][][] */ -18,12,63,-88,-40,33,-10,97,-5,-111,35,72,51,-30,6,127, 
  /* [62][0][][] */ 79,40,-5,-127,-2,8,-3,-37,-8,39,-46,41,19,-22,-104,-78, 
  /* [63][0][][] */ 7,-13,-14,-19,-74,-55,-47,14,-84,-31,-48,-33,127,15,45,-1, 
  /* [64][0][][] */ 14,-18,3,71,-87,-63,-18,-81,77,127,43,17,31,-63,-36,88, 
  /* [65][0][][] */ -28,-2,-14,-6,-71,62,36,-31,62,-110,103,-53,78,52,-127,52, 
  /* [66][0][][] */ -111,107,-101,-72,31,-24,-116,-71,-102,127,71,-15,-102,-72,27,80, 
  /* [67][0][][] */ 16,-20,-127,-107,63,70,13,-22,-15,-13,30,-24,18,18,4,38, 
  /* [68][0][][] */ 42,9,-5,-33,-74,22,29,23,-46,68,127,-1,-11,-57,-122,-2, 
  /* [69][0][][] */ 62,-119,68,-32,32,-127,-15,114,15,69,89,93,-15,59,-29,-10, 
  /* [70][0][][] */ 39,-14,127,55,71,-40,112,-3,48,33,-43,55,-60,42,-64,26, 
  /* [71][0][][] */ 11,34,77,-67,-127,-60,14,9,-30,-15,13,-100,-58,12,9,32, 
  /* [72][0][][] */ -39,-79,7,-127,59,-3,-2,31,-75,-4,-117,-27,60,116,-47,109, 
  /* [73][0][][] */ 28,7,65,7,120,-110,-55,-3,-22,96,-79,49,-92,-71,127,-12, 
  /* [74][0][][] */ -85,15,-127,-76,48,-29,-52,14,-93,35,-99,-51,-14,-41,-50,65, 
  /* [75][0][][] */ 101,-10,33,-55,5,18,-127,-19,-19,-108,58,-11,5,0,5,-4, 
  /* [76][0][][] */ 19,-30,-51,77,18,97,109,-50,51,-127,56,80,38,-60,-78,53, 
  /* [77][0][][] */ -37,-22,127,-36,44,-15,-38,-116,3,22,31,72,46,62,23,-10, 
  /* [78][0][][] */ -30,-7,14,-27,9,-62,60,10,33,-19,4,-93,-127,-72,-112,-58, 
  /* [79][0][][] */ -94,-83,-32,38,127,32,-5,12,33,24,-11,59,-42,-67,-82,-39, 
  /* [80][0][][] */ -20,-95,31,127,-43,-16,-88,76,-13,36,85,-2,-57,8,-21,64, 
  /* [81][0][][] */ 120,51,-3,106,18,19,27,125,40,18,127,79,126,10,61,-43, 
  /* [82][0][][] */ -37,17,4,-43,41,-109,-127,-75,-10,62,-56,-49,-31,109,-61,-33, 
  /* [83][0][][] */ 114,-9,71,-40,-49,-1,-113,-19,13,-127,2,-62,-6,-21,2,-20, 
  /* [84][0][][] */ 4,-58,-93,29,121,42,29,37,-127,35,-95,-48,70,-29,-52,12, 
  /* [85][0][][] */ 35,124,25,-81,102,24,27,-127,116,-71,23,-40,105,-86,16,5, 
  /* [86][0][][] */ 113,-43,127,53,6,-67,75,33,-54,-51,-87,-38,27,9,-67,4, 
  /* [87][0][][] */ -15,14,17,-89,67,-27,-55,2,33,-43,87,-31,-75,-127,10,9, 
  /* [88][0][][] */ -58,-26,31,-6,23,35,-52,-58,-5,2,-67,-127,-38,-30,-25,-26, 
  /* [89][0][][] */ -49,23,8,-75,16,15,-127,25,65,5,-78,-21,-10,-65,-36,-26, 
  /* [90][0][][] */ -18,-28,-20,-66,127,6,-57,33,54,63,39,0,33,6,-64,-24, 
  /* [91][0][][] */ -56,-42,3,30,-52,5,6,51,-49,-63,28,-54,12,67,5,127, 
  /* [92][0][][] */ -22,67,7,-9,-10,51,-102,33,-27,-26,68,12,-47,127,56,11, 
  /* [93][0][][] */ -19,78,-40,-55,103,108,-86,6,83,102,98,66,-127,37,-67,89, 
  /* [94][0][][] */ 18,68,117,15,-127,-53,27,-17,35,-18,36,-9,-51,-39,23,-34, 
  /* [95][0][][] */ 12,54,20,-30,101,0,-116,93,-11,3,-98,60,4,28,127,-29, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0013738059205934405, 0.0019334115786477923, 0.0021665806416422129, 0.0013359069125726819, 0.0016356001142412424, 0.0019076784374192357, 0.0018013545777648687, 0.0019131333101540804, 0.0017503396375104785, 0.0025050747208297253, 0.0014184160390868783, 0.0021411054767668247, 0.0015240826178342104, 0.0012350009055808187, 0.001806307933293283, 0.0016384186455979943, 0.0022703749127686024, 0.0017511909827589989, 0.0021441897843033075, 0.0012654657475650311, 0.0023374978918582201, 0.002143592806532979, 0.0020085633732378483, 0.0017245740164071321, 0.0020563793368637562, 0.002165146404877305, 0.0021834084764122963, 0.0015898504061624408, 0.0015878411941230297, 0.0018585931975394487, 0.0013567844871431589, 0.0018565349746495485, 0.001704830676317215, 0.0012795840157195926, 0.0013100841315463185, 0.0017302477499470115, 0.0024404982104897499, 0.0012515893904492259, 0.0017300770850852132, 0.0014084219001233578, 0.0020895081106573343, 0.0019457673188298941, 0.0031413694377988577, 0.001267332467250526, 0.0017661429010331631, 0.0014857674250379205, 0.0020495583303272724, 0.0016124867834150791, 0.00096784497145563364, 0.0013920493656769395, 0.0024674020241945982, 0.0013148657744750381, 0.0017078424571081996, 0.0026293254923075438, 0.0020810950081795454, 0.0016675314400345087, 0.0018254949245601892, 0.0014947764575481415, 0.0024183525238186121, 0.0016992539167404175, 0.001845406019128859, 0.00159810995683074, 0.0021827160380780697, 0.0016264566220343113, 0.0015363970305770636, 0.0013978384668007493, 0.0019911122508347034, 0.0014855084009468555, 0.0020123028662055731, 0.0017980117117986083, 0.0019355876138433814, 0.0017051337053999305, 0.0014847812708467245, 0.0014132310170680285, 0.0015464747557416558, 0.0013659516116604209, 0.001418303232640028, 0.0016082619549706578, 0.0020277504809200764, 0.0018441666616126895, 0.0010742330923676491, 0.0018244888633489609, 0.0020073768682777882, 0.0017963434802368283, 0.002222095150500536, 0.001473885728046298, 0.0025115902535617352, 0.0016823711339384317, 0.0017484973650425673, 0.0018315046327188611, 0.0020549490582197905, 0.0018065311014652252, 0.0019961104262620211, 0.0015648800181224942, 0.0024654385633766651, 0.0017257420113310218, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { 9781, 15452, -4873, 3110, -1624, 6881, -624, 3569, 15180, -2625, -9701, 10189, -14822, 10010, 4200, 8025, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.012568726669997e-05, 6.6991204221267253e-05, 3.8670354115311056e-05, 6.2906568928156048e-05, 7.0710593718104064e-05, 8.8541157310828567e-05, 4.9514128477312624e-05, 4.9694524932419881e-05, 8.5750725702382624e-05, 6.0598493291763589e-05, 5.0550414016470313e-05, 5.0813567213481292e-05, 6.973744893912226e-05, 6.0049540479667485e-05, 8.669018279761076e-05, 6.5656204242259264e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -106,25,43,-23,-53,-15,-66,-7,-61,3,0,-38,8,55,46,-40,7,-11,84,-1,-1,-52,127,56,37,14,4,19,-58,-112,-82,-7,-30,-51,41,3,-10,17,11,16,-16,-6,-65,8,-52,-11,-13,89,-9,11,-57,-29,-1,4,39,-50,-108,1,-12,91,64,27,12,-11,-40,-61,-31,37,-56,-74,18,-15,21,-10,-76,-42,-33,22,-17,-5,-57,67,74,-72,24,42,-3,50,40,-12,-6,-20,-38,-39,-68,14, 
  /* [1][0][][] */ 45,11,28,-55,-65,-29,4,17,-11,29,40,-77,-1,-16,-62,-37,-18,24,-83,26,-24,-96,24,56,9,-90,-11,-44,89,-104,117,-77,80,39,-15,69,21,87,-25,-56,47,2,-4,-39,4,65,-127,-46,-49,-55,-29,-42,33,-47,-32,52,26,0,-38,24,16,45,-17,-104,-6,-15,-52,-10,21,-3,-92,-2,-40,-22,25,-86,14,25,23,-65,-29,-9,-88,-46,49,-40,-40,14,-74,-7,-62,56,23,85,-72,53, 
  /* [2][0][][] */ 86,-19,33,37,32,-76,74,-4,2,5,-19,3,-74,-49,-1,-20,-112,-65,-27,62,19,-39,-50,44,-10,-56,26,-14,-40,57,-45,122,-72,127,-44,20,5,-25,-24,2,-97,101,101,14,-78,-9,-5,-12,34,15,-19,-37,35,-28,-21,81,28,-7,63,-14,-6,36,-49,28,70,22,-10,-6,33,72,-34,-16,38,38,65,41,27,-76,79,40,101,-5,-46,34,-75,52,33,90,1,2,-41,25,-39,47,-3,37, 
  /* [3][0][][] */ -3,-12,-34,15,0,-18,6,-58,-30,48,46,60,22,0,-54,37,8,-38,39,14,24,127,21,-52,3,22,-25,3,62,-48,55,-17,-18,27,-22,-36,12,42,33,8,-73,-40,-31,26,-29,31,15,9,-21,-47,4,-32,48,-93,-38,-37,3,80,-25,-3,2,-7,-31,-4,30,36,-47,-10,-26,-4,16,-70,-26,-52,29,0,12,-15,-26,-45,-24,-8,-59,15,-4,-46,44,-23,-8,25,36,-22,56,21,-33,61, 
  /* [4][0][][] */ 21,29,-33,30,20,40,-49,1,-45,91,98,-14,-3,-11,3,-59,16,-17,-17,66,22,-49,69,96,-82,1,-127,26,-40,-65,23,3,-81,-78,7,75,21,30,12,32,-27,-42,69,-37,-10,5,-46,73,-58,75,26,32,31,-33,-88,30,58,-24,24,-33,50,-17,21,23,-68,30,-29,0,-42,43,-47,39,52,-72,-49,-64,20,-56,-7,9,-51,109,-77,6,-29,38,42,-55,53,1,37,5,-55,-49,55,29, 
  /* [5][0][][] */ -59,17,31,-8,32,-30,42,-21,-30,15,-18,-46,37,-5,-7,-52,-8,-11,40,11,-119,-37,-65,30,-24,-26,27,0,58,-67,-31,58,68,127,0,30,-19,27,60,-33,-27,75,54,-23,9,81,28,8,12,9,-34,12,35,-33,37,-91,26,-29,-73,-45,70,85,-30,-33,83,-54,-77,-62,-66,-33,-75,7,-11,9,-8,-36,34,-31,-44,-16,111,-19,28,-99,-63,17,18,-29,-28,23,40,10,-22,40,-4,81, 
  /* [6][0][][] */ 37,4,-67,35,-19,-100,114,79,-67,74,-30,90,-100,-98,41,49,8,-56,-1,24,11,0,-51,-69,-67,57,67,48,51,46,109,-53,7,9,2,-59,5,-13,14,92,9,33,-46,-44,-17,-79,-60,35,23,-104,-3,92,23,26,-2,-51,87,33,31,-13,-127,38,-109,19,36,19,13,62,54,37,7,-59,-53,27,86,18,52,-3,30,-62,-18,-36,-62,82,-10,-53,38,29,-55,62,16,25,-6,4,-17,102, 
  /* [7][0][][] */ 39,91,-24,-54,-10,-4,44,-5,-36,43,-46,-38,-43,0,-5,-25,-53,-48,-27,65,4,127,11,42,-16,21,33,36,36,32,86,-32,49,40,-22,19,17,-23,-13,43,-61,8,14,-59,3,-56,79,-41,17,-84,-66,-14,-58,20,7,-11,37,2,-82,-8,-18,96,2,-8,-29,12,-29,26,-21,-4,-80,15,-1,59,-46,38,-47,64,8,-63,-32,-49,66,-58,25,-45,0,13,-20,82,-90,32,60,-28,-27,-3, 
  /* [8][0][][] */ 1,76,-55,32,-39,-12,-88,33,-96,-37,-3,-9,-39,47,43,83,7,-38,0,-4,19,-14,12,-4,-25,59,-1,10,-8,-25,-51,-40,-12,-55,-12,-54,-37,30,56,-8,-6,-44,42,24,-19,-21,-5,-5,-11,-15,33,75,8,-25,-70,75,-27,25,-14,-25,-23,5,28,38,-40,-48,-43,-2,-49,-3,-7,12,-3,-52,-102,-20,-41,28,-67,-31,-19,-8,-24,-42,12,11,9,18,18,51,-48,-6,-92,-127,9,-36, 
  /* [9][0][][] */ -31,25,-68,55,-23,-43,86,44,-23,48,-14,118,-37,-38,12,127,32,0,80,30,33,31,25,-114,-52,10,38,-9,1,-14,56,48,-45,-16,-15,-110,23,-35,-36,-7,-23,34,33,-21,-23,-11,29,5,24,92,41,-8,-76,-73,-10,11,-12,-25,89,-35,-80,46,-68,-16,78,-4,-17,-6,-60,35,53,24,-23,98,-37,-21,-48,8,-34,-15,44,-35,54,12,15,-28,-6,-24,-76,27,18,-16,83,22,-33,-13, 
  /* [10][0][][] */ 70,-4,-67,1,-45,-40,63,-3,9,-37,-33,1,-115,-6,1,-5,-56,-27,28,6,47,49,16,-5,-56,85,31,-8,-41,-89,-48,-28,56,-44,63,19,89,-96,94,127,-2,-54,3,18,-17,-93,-26,52,26,89,-51,-25,-13,13,35,48,4,-62,77,48,2,61,-58,-17,-6,-60,33,74,16,-36,-6,26,113,23,22,-81,40,-34,70,-21,-51,12,38,21,-20,-9,20,35,-37,-22,28,57,58,60,-17,1, 
  /* [11][0][][] */ -60,-40,30,-58,29,-18,-42,-30,49,-57,-15,-5,-18,13,18,-5,-43,7,55,-2,-69,20,-60,-91,15,8,-57,44,20,-68,27,-50,15,-31,18,-34,-88,-1,-106,7,-90,59,-27,58,19,14,-9,-52,31,-53,-62,-57,29,26,91,-66,-38,-86,0,-38,-11,-44,-12,-127,21,-73,50,87,103,7,64,-9,-22,-26,70,-21,107,55,17,33,42,-31,-3,82,91,7,-6,-37,-79,-63,-30,12,37,46,55,62, 
  /* [12][0][][] */ 36,-4,7,-32,27,117,-13,17,56,65,11,73,1,46,12,10,-75,42,13,53,127,2,59,-69,23,36,-68,-68,-8,92,9,10,18,-24,14,-19,66,-3,-31,-34,26,-7,46,41,-5,30,18,1,-71,17,-1,24,-33,-30,10,19,-29,65,15,37,17,-108,-3,-91,-18,100,4,-45,7,-41,69,5,-13,23,-10,31,-23,51,-96,2,-28,31,123,-3,-12,82,-34,-79,70,-2,-96,70,84,9,-10,-92, 
  /* [13][0][][] */ -21,47,1,-26,-20,-9,18,-42,23,-15,-26,-53,79,-109,-56,-68,-14,-37,-69,-1,-72,-16,27,88,-35,18,114,21,36,-24,66,36,0,-8,-127,123,-41,-61,9,-35,123,21,-9,8,-21,-97,66,-42,52,11,-21,37,11,4,-19,82,72,-59,-25,-24,34,30,-9,-64,-10,44,-27,25,-47,-34,-63,-10,-77,15,-51,-78,-112,6,40,71,-25,67,24,-70,35,49,43,-5,-28,-13,-19,26,-40,27,-4,-16, 
  /* [14][0][][] */ 6,12,-60,-20,74,85,-83,0,30,-30,80,5,7,-29,-48,-53,-78,15,19,127,6,-19,-7,17,-7,44,-15,59,18,4,-22,23,57,10,-44,10,-5,55,63,17,50,8,10,-6,-16,-42,53,-41,24,6,-14,-20,33,14,-44,20,22,63,-86,-15,-26,-61,-50,-84,-4,-32,-37,-8,-58,58,-12,19,-11,-15,-27,-32,18,-19,-50,-17,13,23,-7,-25,-22,44,-16,-7,-26,67,65,28,3,-17,-37,-60, 
  /* [15][0][][] */ -79,-26,31,-51,8,-39,-37,-94,2,18,16,80,-8,-11,32,84,-110,-18,27,-59,38,-24,-11,-88,48,-12,55,-37,-84,-123,-68,28,-55,56,93,-108,-1,-37,19,-26,-9,-1,34,-17,-1,-8,83,104,-49,-11,32,-46,-56,47,22,-46,-104,-22,127,11,-32,8,-94,24,-78,-25,16,26,56,-88,98,-39,63,-56,-37,-39,13,29,33,-7,-18,85,61,37,1,-30,-117,29,-9,-37,-94,13,64,-36,-22,46, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0021303417161107063, 0.0028471259865909815, 0.0016434900462627411, 0.0026735290884971619, 0.0030052002985030413, 0.0037629990838468075, 0.0021043503656983376, 0.0021120172459632158, 0.0036444058641791344, 0.002575435908511281, 0.0021483926102519035, 0.0021595766302198172, 0.0029638416599482298, 0.0025521053466945887, 0.0036843325942754745, 0.0027903886511921883, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 1542, -347, -2110, -5125, 182, 2887, -779, -162, -1048, -4318, 9642, -2432, -200, 15002, 9108, -4727, 17818, -538, -5837, 1019, 1698, -3743, 224, -1873, 923, -5040, -1647, -4103, -47, -9708, 1428, -1014, 9135, -1567, -2627, 352, -135, -1920, -1398, 9431, 1313, 249, 1695, -5983, 13545, 17719, -1982, 19421, 228, 11936, 10838, -3561, -711, 1450, -30, 15096, -2581, -1035, 15488, 5748, 13367, 12757, 11992, -7254, 2662, 454, -4710, 4407, -4087, -2409, 1594, 470, 15234, 161, -437, 11582, -7, -32, 9234, 353, -617, 18986, -2595, 2150, 15071, -751, -5622, -3437, 2673, -6125, 12673, 645, -547, -220, -5151, -3775, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00026388932019472122, 0.00013948875130154192, 0.00012455446994863451, 0.00012631449499167502, 0.00020473106997087598, 0.0002703628852032125, 0.00024672350264154375, 0.00020188372582197189, 0.00017166131874546409, 0.00012221685028634965, 8.1866499385796487e-05, 0.00020641885930672288, 0.00021570989338215441, 7.6531177910510451e-05, 9.8366821475792676e-05, 0.0001429675321560353, 8.2656501035671681e-05, 0.00015583790082018822, 0.00013381829194258898, 7.2501112299505621e-05, 0.00015144297503866255, 0.00022963467927183956, 0.00021844502771273255, 0.00019739520212169737, 0.00042620630119927227, 0.00015807752788532525, 0.00020688120275735855, 0.00012841350689996034, 0.0002031465555774048, 7.8477307397406548e-05, 0.00032829411793500185, 0.00016308409976772964, 0.00018222632934339345, 0.00013758124259766191, 0.00027952698292210698, 0.000316231744363904, 0.00018313623149879277, 0.00017695580027066171, 0.00030112173408269882, 0.00011425442062318325, 0.00017541379202157259, 0.00018938422726932913, 0.0002207745419582352, 0.00012628179683815688, 7.9513774835504591e-05, 7.8513767221011221e-05, 0.00018243485828861594, 9.4845854619052261e-05, 0.00016654767387080938, 9.2921734903939068e-05, 0.00011482723493827507, 0.00012719399819616228, 0.00019151094602420926, 0.00011478595843072981, 0.00022970634745433927, 0.00010266744357068092, 0.00016200184472836554, 0.00017358933109790087, 0.00015698434435762465, 0.00013670965563505888, 8.8185217464342713e-05, 0.00016612795297987759, 9.2509697424247861e-05, 9.5171497378032655e-05, 0.00015823815192561597, 0.00020912675245199353, 0.00011958607501583174, 0.0001786605134839192, 0.00018132817058358341, 0.00011275027645751834, 0.00022799808357376605, 0.00013167485303711146, 0.00010657948587322608, 0.00019771090592257679, 0.00027479679556563497, 9.2446789494715631e-05, 0.00014154595555737615, 0.00012940795568283647, 0.00016095966566354036, 0.00015831711061764508, 0.00023411944857798517, 8.2281512732151896e-05, 0.00023336123558692634, 0.00014769269910175353, 7.3123337642755359e-05, 0.00021447856852319092, 0.00011239098239457235, 0.0001999598607653752, 0.00018753999029286206, 0.0001794413838069886, 0.00010089467104990035, 0.00040224622352980077, 0.00017983323778025806, 0.00021560225286521018, 9.9711098300758749e-05, 0.00027267012046650052, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 7,90,-25,34,-48,7,54,33,64,-70,-127,74,-5,-37,28,-48,-106,40,4,52,27,85,34,53,-1,9,-61,-13,-11,29,20,-23,-41,23,-17,92,8,54,9,-3,18,-52,-13,58,-127,-36,22,-53,-33,-77,-49,-20,-11,47,-25,13,-64,-57,-54,-127,-127,-5,-126,0,-51,57,27,-27,-6,24,36,-6,-39,-10,42,-1,-18,-45,-50,10,10,-78,55,-9,-29,-26,-5,9,-127,-7,-102,21,90,12,76,3, -40,-53,2,127,-21,109,-19,-12,92,52,-127,119,-32,-91,-91,110,-97,89,38,86,115,19,86,127,13,41,15,24,8,98,-28,-127,81,113,19,43,51,101,-24,-127,127,-18,76,127,-70,-57,127,-88,-23,-113,-72,-42,-23,127,-11,-127,31,36,-103,-49,-92,-127,-73,69,-57,85,94,-63,15,127,127,-1,-93,6,-37,-127,5,-52,6,127,-12,-57,127,-67,-48,-24,127,41,80,127,-72,-11,124,-44,127,34, 10,-118,-21,-8,-35,-16,-1,33,9,78,-94,-4,-2,14,38,-75,-44,24,-5,42,13,50,63,52,4,-20,28,22,15,40,1,-50,-33,-75,-15,38,11,32,15,-23,-17,17,-14,27,-34,-51,17,3,14,-27,-5,-6,-40,-39,22,-9,50,-70,-5,-54,-124,-3,-103,-17,30,28,-104,-19,-14,4,7,23,-20,-60,-13,47,-11,-12,-57,-18,8,-85,46,5,29,-16,2,-47,-104,-17,-11,18,34,44,40,-17, 
  /* [0][1][][] */ 71,18,32,102,20,-69,127,27,-18,-118,-76,127,-3,-127,-56,19,-59,-42,41,47,-122,11,-127,-53,-24,90,-127,127,-78,99,104,105,23,84,21,83,-127,81,-18,-26,46,-127,12,61,-109,-127,18,-86,-127,-125,-127,18,125,-78,76,-28,-124,9,-42,6,-38,-78,-33,53,-127,-7,125,-112,-56,67,-31,-127,-127,76,127,-100,104,64,-77,-68,127,-117,-13,117,-65,0,-2,112,-23,1,-39,15,-29,-95,57,-11, -127,7,-25,117,-98,-127,-121,-127,101,26,-52,54,-92,-100,-88,127,-127,-127,127,127,15,-127,-83,95,-127,127,15,74,-77,-7,-127,97,-127,104,127,-55,7,127,127,-90,-57,11,19,48,6,-118,-63,-85,-7,-127,-102,127,35,98,59,-122,37,29,118,-11,-60,-61,-127,127,-34,-127,127,127,12,101,-90,-59,-51,68,-103,-96,127,127,50,-72,-95,-7,-71,62,-112,-73,119,127,108,124,-127,-127,-127,-65,57,127, 45,-6,66,40,2,-21,19,20,-68,127,-83,63,5,-40,-127,49,8,-26,42,16,-127,17,-47,-78,-2,50,124,-15,127,102,22,-107,-1,-127,1,127,-91,-3,-49,-76,-6,75,15,63,12,-35,5,-127,127,-72,-33,11,21,-127,-127,12,127,-2,-127,63,-48,-56,-11,33,115,-31,-22,-2,-72,24,-43,-27,-93,-127,-5,-74,-3,-38,-127,-66,-83,-127,-2,127,-127,26,-8,5,-48,-27,-11,30,-11,127,37,-8, 
  /* [0][2][][] */ 24,-127,11,-32,12,-3,34,45,-28,-35,63,-76,29,-35,3,2,-26,42,-10,36,-38,66,30,-7,7,18,-3,-16,-19,39,-20,56,-2,1,-12,-31,62,18,15,-50,-12,6,-12,-21,13,-53,0,-37,-27,35,24,23,17,-14,-24,10,5,3,-10,-3,-91,12,14,-11,-53,59,-99,-14,10,32,3,56,-12,4,24,35,-19,-51,-39,-1,21,-26,-18,-37,-45,42,-3,7,-90,30,9,9,4,-8,16,-20, -57,-10,127,-49,127,94,-29,-6,-127,39,-26,-53,127,-48,-34,33,4,81,8,-30,2,28,56,17,60,-54,9,25,-12,127,-37,40,-36,47,17,-62,82,53,39,-121,-35,-8,-127,22,31,-31,-23,-92,-19,-7,4,80,127,-107,-25,-102,-2,127,-59,8,39,-68,58,63,-49,17,-97,11,127,6,10,101,-100,26,-32,-42,-30,-98,-45,-28,3,-63,-26,-75,-33,127,44,-30,86,22,57,19,-14,-24,-12,-5, 1,81,5,-56,-7,2,-11,49,-7,77,48,-30,-1,-26,8,56,-32,28,7,65,-35,52,-7,-17,17,18,35,24,11,52,-16,-97,-33,-5,-4,-30,53,-22,4,-11,-19,-7,11,22,3,13,-8,-48,35,39,-4,2,17,-44,11,-10,22,-14,-19,40,-87,19,2,-10,38,19,-127,22,35,23,-11,84,3,-8,-10,42,-30,-36,-5,2,9,-38,-8,3,-17,34,-29,-14,-103,26,-3,6,-2,-4,-27,-23, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.013516489416360855, 0.0071446551010012627, 0.0063797170296311378, 0.006469865795224905, 0.01048638578504324, 0.013848066329956055, 0.012637251056730747, 0.010340544395148754, 0.0087925437837839127, 0.0062599834054708481, 0.0041932263411581516, 0.010572834871709347, 0.011048724874854088, 0.0039199497550725937, 0.0050383778288960457, 0.0073228389956057072, 0.0042336904443800449, 0.0079820631071925163, 0.0068542123772203922, 0.0037135283928364515, 0.0077569540590047836, 0.011761955916881561, 0.011188819073140621, 0.010110640898346901, 0.021830413490533829, 0.0080967778339982033, 0.010596516542136669, 0.0065773776732385159, 0.010405226610600948, 0.0040196310728788376, 0.016815321519970894, 0.0083532156422734261, 0.0093336869031190872, 0.007046951912343502, 0.014317454770207405, 0.016197483986616135, 0.009380292147397995, 0.0090637281537055969, 0.015423543751239777, 0.00585214514285326, 0.0089847464114427567, 0.0097003160044550896, 0.011308137327432632, 0.0064681912772357464, 0.0040727192535996437, 0.0040214983746409416, 0.0093443673104047775, 0.004858032800257206, 0.0085306214168667793, 0.0047594788484275341, 0.0058814850635826588, 0.006514914333820343, 0.0098092472180724144, 0.0058793709613382816, 0.011765627190470695, 0.0052586570382118225, 0.0082977823913097382, 0.0088912965729832649, 0.0080407848581671715, 0.0070023089647293091, 0.0045168730430305004, 0.0085091227665543556, 0.0047383741475641727, 0.0048747123219072819, 0.0081050051376223564, 0.010711533948779106, 0.006125234067440033, 0.0091510443016886711, 0.0092876823619008064, 0.0057751024141907692, 0.011678129434585571, 0.0067444252781569958, 0.0054590329527854919, 0.010126811452209949, 0.014075173065066338, 0.0047351517714560032, 0.0072500254027545452, 0.0066283140331506729, 0.0082444017753005028, 0.0081090489402413368, 0.011991667561233044, 0.0042144833132624626, 0.011952831409871578, 0.0075648641213774681, 0.0037453991826623678, 0.010985655710101128, 0.0057566994801163673, 0.01024200301617384, 0.0096058538183569908, 0.0091910408809781075, 0.0051678549498319626, 0.020603170618414879, 0.0092111118137836456, 0.011043211445212364, 0.0051072319038212299, 0.013966244645416737, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 7985, 4296, 908, -1051, 7667, 11791, 11251, 1999, -631, 8945, 2014, -5890, 2911, 3804, 918, -391, 3840, 7397, -105, 232, 5603, 12224, 13181, -1323, -3563, -1336, 17726, -446, 1817, 1021, 11478, -2382, 11158, 2791, 5933, -4143, 1247, -6353, 264, 3035, 2916, 1384, 1697, -184, 1148, 2061, 3787, 3382, 4612, 4185, 5177, 3611, -2750, 3353, 1743, 3189, 1516, 1893, 13191, 1556, -1573, 7323, 4527, 5419, 6428, 6488, -5468, 2489, 6660, -1369, 6139, 1333, 2553, 5077, 3274, 3323, -366, 1835, 3521, 4005, 2905, 3773, 9610, 265, 2644, 4804, 1513, -1442, 19647, -936, 1534, -1237, 9930, 3004, 420, -843, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00010014477447839454, 8.6270694737322628e-05, 0.0001737330894684419, 0.0001758259313646704, 9.6522191597614437e-05, 7.0906709879636765e-05, 7.6486394391395152e-05, 0.00014333880972117186, 0.00016086123650893569, 8.1843405496329069e-05, 0.00012144972424721345, 9.5254748885054141e-05, 0.00015128758968785405, 0.00011727591481758282, 0.0001242340513272211, 0.00013672627392224967, 0.0001504093233961612, 9.3693844974040985e-05, 0.00013884082727599889, 0.00013580809172708541, 0.00011592172086238861, 7.1866714279167354e-05, 6.9676163548137993e-05, 0.00016940513160079718, 0.0001470389252062887, 0.00013210461474955082, 4.9430942453909665e-05, 9.9766009952872992e-05, 0.00014391099102795124, 0.00014991966600064188, 7.7245800639502704e-05, 0.00013321421283762902, 6.8046458181925118e-05, 0.00016321155999321491, 0.00010770239896373823, 0.00013818114530295134, 0.00013927597319707274, 9.6536074124742299e-05, 0.00013008649693801999, 0.0001201476770802401, 0.00013024869258515537, 0.00018466710753273219, 0.00017891942115966231, 0.00015886334585957229, 0.00020062150724697858, 0.00016333887469954789, 0.00013857093290425837, 0.00018631885177455842, 0.00013216189108788967, 0.00012956718273926526, 0.00012024776515318081, 0.00012238362978678197, 0.00013161166862118989, 0.00012114998389733955, 0.00014787453983444721, 0.00013710407074540854, 0.00018836384697351605, 0.00016479178157169372, 6.5307016484439373e-05, 0.00012156618322478607, 0.00016927906835917383, 9.9931785371154547e-05, 0.0001227457687491551, 0.00011407995771151036, 9.3070600996725261e-05, 0.00010742543236119673, 9.4409377197735012e-05, 0.00015276216436177492, 0.00010107256821356714, 0.0001307405618717894, 0.0001057487606885843, 0.00011304490180918947, 0.00014136199024505913, 7.6801494287792593e-05, 0.00014602328883484006, 8.7977568909991533e-05, 0.00014644429029431194, 0.00017164167365990579, 0.00012060977314831689, 0.00013743106683250517, 0.00014877133071422577, 0.00011838146747322753, 7.6776472269557416e-05, 0.0001643896393943578, 0.00014444142288994044, 0.00013364142796490341, 0.00012381971464492381, 0.00018389798060525209, 4.9777932872530073e-05, 0.00013379269512370229, 0.00014043436385691166, 0.00013335938274394721, 8.1930935266427696e-05, 0.00012650481949094683, 0.00012753927148878574, 0.0001152953554992564, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -32,25,11,-40,-1,-85,-49,-17,47,-52,39,-52,93,-95,23,-127, 
  /* [1][0][][] */ -96,44,-118,-115,-66,20,-10,51,-54,-10,119,-35,58,127,29,41, 
  /* [2][0][][] */ -34,6,-81,-10,-22,-56,36,-52,-73,127,51,-4,55,38,-56,92, 
  /* [3][0][][] */ -57,-71,12,-33,-72,28,-57,-127,-7,14,32,-57,-82,-26,-97,-53, 
  /* [4][0][][] */ 77,16,-1,27,-51,-23,-127,62,37,91,5,43,21,-13,-63,-89, 
  /* [5][0][][] */ -61,43,-80,-11,31,-54,11,-76,82,-46,-12,-60,20,-120,-127,-51, 
  /* [6][0][][] */ -15,-21,-47,35,-63,61,53,-22,-26,-36,127,-29,11,15,-122,29, 
  /* [7][0][][] */ -31,122,127,-72,47,97,-24,-55,41,75,-72,3,71,17,31,88, 
  /* [8][0][][] */ -32,2,42,-1,34,-5,80,127,-90,-22,-66,-73,15,77,-69,-47, 
  /* [9][0][][] */ 37,34,102,35,-85,-11,-117,-102,30,-12,127,45,-24,-71,71,-27, 
  /* [10][0][][] */ -28,-124,19,-58,-127,54,47,43,-14,-41,9,51,-9,67,-99,33, 
  /* [11][0][][] */ 85,-71,9,97,-82,-51,41,-6,127,120,-29,53,29,-53,-18,83, 
  /* [12][0][][] */ -41,-39,127,-27,46,-20,38,32,63,-21,78,74,-27,7,-89,29, 
  /* [13][0][][] */ 2,-48,38,42,11,-4,100,26,-77,30,25,31,-15,127,103,-73, 
  /* [14][0][][] */ 106,-71,127,1,61,32,91,65,68,88,48,20,73,-15,17,-43, 
  /* [15][0][][] */ 19,108,4,-63,43,127,-66,42,-46,-40,-59,-31,-66,86,-32,-60, 
  /* [16][0][][] */ -54,79,116,-44,6,71,30,-19,-6,2,-9,52,102,8,107,127, 
  /* [17][0][][] */ 37,127,52,-100,3,-17,35,-97,-66,48,-1,62,-47,-2,104,-35, 
  /* [18][0][][] */ -65,-15,-66,-109,127,68,-46,-68,53,76,100,74,-14,87,-56,-18, 
  /* [19][0][][] */ 49,109,102,78,34,-43,-24,4,-16,115,50,127,68,59,-38,51, 
  /* [20][0][][] */ 69,-35,7,92,-90,4,-55,45,2,-32,-127,-71,120,-45,33,-22, 
  /* [21][0][][] */ -85,-81,-30,127,-45,3,-114,72,-8,-16,17,10,-33,40,-46,26, 
  /* [22][0][][] */ -22,-8,-103,-54,127,6,-28,84,62,74,62,61,-8,39,-26,62, 
  /* [23][0][][] */ -67,24,-20,4,11,51,83,58,-21,127,-5,-8,1,46,-44,-10, 
  /* [24][0][][] */ 43,-92,45,2,127,30,60,-39,32,8,45,44,-86,32,9,-20, 
  /* [25][0][][] */ 127,-72,58,34,15,-5,-27,85,122,-43,-35,21,120,-40,105,26, 
  /* [26][0][][] */ 79,20,127,101,52,-15,-83,-25,26,76,2,104,24,-92,33,-43, 
  /* [27][0][][] */ -48,50,-102,3,-57,127,48,-91,21,-83,105,-2,42,-61,117,117, 
  /* [28][0][][] */ -77,48,-82,-115,14,-71,-10,-62,-105,127,-31,41,-5,53,-54,61, 
  /* [29][0][][] */ 78,85,-65,56,50,90,-51,-4,48,45,20,71,-127,27,-8,96, 
  /* [30][0][][] */ -45,57,-127,-40,88,-43,30,22,-37,54,-43,4,15,75,-29,113, 
  /* [31][0][][] */ 60,-126,127,16,105,-81,-120,18,-69,-30,-5,-62,-127,41,22,126, 
  /* [32][0][][] */ -58,101,-35,29,-121,77,9,61,1,-127,12,-116,21,22,33,56, 
  /* [33][0][][] */ -66,-24,83,114,-23,10,-73,15,-32,-55,15,0,-5,-22,14,127, 
  /* [34][0][][] */ -23,24,-104,-93,38,6,-6,49,3,-26,16,0,-53,-29,-15,127, 
  /* [35][0][][] */ 77,-3,16,-11,-13,34,-84,-26,-30,-127,-42,26,-1,-17,54,-20, 
  /* [36][0][][] */ 8,37,-117,-2,17,127,-24,32,-43,-1,49,26,14,30,-54,57, 
  /* [37][0][][] */ 60,18,83,-31,40,-127,13,-13,-87,75,-55,0,17,37,118,11, 
  /* [38][0][][] */ -47,127,28,-50,35,26,78,-88,14,-12,-85,32,-41,-88,-90,-6, 
  /* [39][0][][] */ 75,53,-94,-127,5,-25,-2,-62,0,15,-15,-51,46,-12,-122,-74, 
  /* [40][0][][] */ -50,35,-100,-88,-44,-5,29,-127,-26,-17,2,-48,37,90,66,92, 
  /* [41][0][][] */ -17,-103,-12,127,12,-16,-63,-2,-12,-62,63,-78,-60,11,-16,15, 
  /* [42][0][][] */ -40,61,-4,-127,16,9,5,-39,77,17,-30,29,93,-32,-40,1, 
  /* [43][0][][] */ 22,62,14,-4,127,37,5,10,17,15,-18,-74,-125,-69,-25,-24, 
  /* [44][0][][] */ 75,-27,46,54,-8,-12,-5,25,42,-48,48,27,127,12,-64,-44, 
  /* [45][0][][] */ 29,-55,-79,35,-50,-68,24,39,7,-42,17,7,-81,127,55,-15, 
  /* [46][0][][] */ 0,-63,27,87,-17,-2,-87,53,16,-43,28,-37,40,68,79,127, 
  /* [47][0][][] */ -28,-39,14,64,-13,16,56,18,-5,-55,-127,-39,41,-34,-58,19, 
  /* [48][0][][] */ -87,60,4,-17,21,39,-18,-127,29,-13,23,-55,38,-123,-46,3, 
  /* [49][0][][] */ -42,13,33,-46,-5,12,120,127,-35,-48,-10,32,-42,28,-53,51, 
  /* [50][0][][] */ 43,-3,-43,46,49,-127,-20,14,-47,55,-28,-14,21,-47,-108,-37, 
  /* [51][0][][] */ -32,70,-46,100,-56,45,-54,-91,-30,-75,-2,-43,-10,19,-17,127, 
  /* [52][0][][] */ -115,11,33,-13,11,41,44,-8,28,-76,-41,-24,-97,-63,-127,-26, 
  /* [53][0][][] */ -63,-50,-66,-127,-23,9,25,91,20,-42,-28,36,-42,41,75,89, 
  /* [54][0][][] */ -3,-65,17,-12,-40,33,69,-19,-12,-84,29,13,-5,-33,-127,33, 
  /* [55][0][][] */ -6,-31,-60,21,56,-44,71,115,-45,-53,-127,-35,75,-52,-21,65, 
  /* [56][0][][] */ 57,-24,-52,3,-127,30,-100,-17,-28,6,-19,15,98,-24,50,18, 
  /* [57][0][][] */ -51,15,16,-14,127,38,30,54,-47,52,16,-1,-75,84,-87,-16, 
  /* [58][0][][] */ 34,20,24,-34,43,-22,-73,-72,40,-127,-77,6,-69,-57,-54,43, 
  /* [59][0][][] */ -66,-21,-27,-7,18,86,-99,-69,62,127,-110,24,-37,-13,5,-13, 
  /* [60][0][][] */ 11,-62,3,30,-127,-60,37,21,-1,50,-24,31,5,-30,48,61, 
  /* [61][0][][] */ 29,55,-109,-33,-42,-16,-127,-94,-46,27,36,112,67,-50,102,73, 
  /* [62][0][][] */ 74,-22,44,-3,-41,13,65,127,-40,115,2,71,47,43,66,115, 
  /* [63][0][][] */ 17,-104,-19,-17,-71,19,54,-34,-12,-18,11,-16,-24,127,84,25, 
  /* [64][0][][] */ -24,12,-127,-23,36,63,42,2,-26,-91,39,7,50,-15,-44,103, 
  /* [65][0][][] */ -22,11,47,82,68,-1,104,95,-58,-23,-114,-97,22,127,-67,1, 
  /* [66][0][][] */ -34,-114,-22,-127,-86,-115,66,-55,-21,-60,43,102,-50,-19,-48,87, 
  /* [67][0][][] */ -6,-52,-50,-40,-77,92,-24,-127,-66,-23,-49,-74,7,-32,-76,18, 
  /* [68][0][][] */ 127,34,12,-18,-93,2,-53,-51,-56,-117,-20,-16,48,-33,60,-77, 
  /* [69][0][][] */ 41,-8,64,-7,-5,-61,-58,27,3,127,-15,23,12,43,79,-26, 
  /* [70][0][][] */ 50,-2,-39,74,-124,41,-13,-79,80,127,13,44,48,-50,5,25, 
  /* [71][0][][] */ 102,-79,70,127,-92,-16,14,-33,125,29,-58,48,102,-90,18,11, 
  /* [72][0][][] */ 0,-38,30,111,49,16,-127,86,71,-18,27,0,-50,-55,-81,92, 
  /* [73][0][][] */ 108,0,105,-117,112,-127,-113,49,12,114,-22,41,-1,-82,47,-34, 
  /* [74][0][][] */ 112,-3,30,64,-127,-36,53,-3,-68,-65,5,-54,36,-74,-16,10, 
  /* [75][0][][] */ 104,127,-124,32,46,56,-8,-69,-3,-47,86,90,-101,71,69,122, 
  /* [76][0][][] */ -63,-48,-17,-66,-72,-1,110,2,-56,12,127,69,-51,-126,-13,100, 
  /* [77][0][][] */ -55,127,-5,-8,-29,-62,57,87,17,-68,-39,46,-2,58,14,57, 
  /* [78][0][][] */ 127,50,-36,21,-58,27,-92,-25,-9,-8,-72,30,24,-109,18,52, 
  /* [79][0][][] */ -45,-7,91,54,-46,-65,-59,-40,-39,-12,25,32,-55,127,-41,86, 
  /* [80][0][][] */ 78,127,17,-101,-24,41,81,-51,-11,-7,-29,31,58,-64,8,14, 
  /* [81][0][][] */ 40,-54,8,-108,88,54,-11,127,87,42,-34,-56,-32,13,-86,-48, 
  /* [82][0][][] */ 75,40,80,13,127,-93,37,46,6,85,-50,4,-23,-34,9,-72, 
  /* [83][0][][] */ -26,60,15,26,75,43,127,81,10,27,-10,-53,-71,101,-48,-96, 
  /* [84][0][][] */ 7,-82,4,80,21,-79,-83,24,-55,71,-55,11,-127,57,-29,-63, 
  /* [85][0][][] */ -105,49,-49,-13,-6,-16,-37,-27,-38,18,8,-96,-127,-71,-56,65, 
  /* [86][0][][] */ 0,68,110,121,56,-32,59,28,4,26,-73,-93,13,82,-127,-67, 
  /* [87][0][][] */ -7,61,127,-40,-116,-22,34,9,27,-36,18,33,-52,25,-20,-11, 
  /* [88][0][][] */ -35,-40,-125,38,59,56,-12,19,-18,-60,-96,-97,127,2,-12,40, 
  /* [89][0][][] */ 47,14,28,-116,1,-73,-67,57,127,-3,17,-87,-8,-32,70,-67, 
  /* [90][0][][] */ -10,76,-1,19,-56,44,45,127,1,-72,1,117,59,17,-29,99, 
  /* [91][0][][] */ -74,-12,-16,91,104,54,-58,-92,-63,51,-6,-2,-127,-109,-47,3, 
  /* [92][0][][] */ -47,54,-14,1,-127,0,-57,66,-23,69,94,50,2,4,41,24, 
  /* [93][0][][] */ 118,46,127,58,-112,-91,14,44,-19,-64,-28,-89,53,-39,10,-19, 
  /* [94][0][][] */ -47,-127,15,-126,29,52,-14,-5,73,-39,6,58,20,72,-64,36, 
  /* [95][0][][] */ -66,-76,-24,-62,127,116,-48,38,117,66,-63,84,-15,123,-98,25, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.001616267254576087, 0.0013923492515459657, 0.0028039317112416029, 0.0028377086855471134, 0.0015578012680634856, 0.0011443851981312037, 0.0012344373390078545, 0.0023133889771997929, 0.0025961888022720814, 0.0013208958553150296, 0.0019601143430918455, 0.0015373455826193094, 0.0024416767992079258, 0.0018927520141005516, 0.002005051588639617, 0.0022066673263907433, 0.0024275023024529219, 0.001512153772637248, 0.0022407947108149529, 0.0021918483544141054, 0.0018708962015807629, 0.0011598789133131504, 0.0011245249770581722, 0.0027340813539922237, 0.002373106312006712, 0.0021320770028978586, 0.00079778116196393967, 0.0016101542860269547, 0.0023226237390190363, 0.0024195995647460222, 0.001246693660505116, 0.002149985171854496, 0.0010982226813212037, 0.0026341213379055262, 0.0017382421065121889, 0.0022301478311419487, 0.0022478175815194845, 0.0015580253675580025, 0.0020995058584958315, 0.0019391002133488655, 0.0021021235734224319, 0.0029803991783410311, 0.0028876354917883873, 0.0025639443192631006, 0.0032378921750932932, 0.0026361763011664152, 0.0022364389151334763, 0.0030070571228861809, 0.0021330013405531645, 0.0020911244209855795, 0.0019407155923545361, 0.0019751868676394224, 0.0021241211798042059, 0.0019552768208086491, 0.0023865925613790751, 0.0022127646952867508, 0.0030400620307773352, 0.0026596251409500837, 0.0010540100047364831, 0.0019619939848780632, 0.0027320468798279762, 0.0016128297429531813, 0.0019810316152870655, 0.0018411714117974043, 0.0015020950231701136, 0.0017337719909846783, 0.0015237019397318363, 0.0024654753506183624, 0.0016312411753460765, 0.0021100619342178106, 0.0017067117150872946, 0.0018244663951918483, 0.0022814844269305468, 0.0012395229423418641, 0.0023567145690321922, 0.0014198969583958387, 0.0023635092657059431, 0.0027701775543391705, 0.0019465581281110644, 0.0022180422674864531, 0.0024010662455111742, 0.0019105948740616441, 0.0012391190975904465, 0.0026531347539275885, 0.0023311844561249018, 0.002156879985705018, 0.0019983644597232342, 0.0029679860454052687, 0.00080338132102042437, 0.0021593214478343725, 0.0022665131837129593, 0.0021523279137909412, 0.0013223085552453995, 0.0020417000632733107, 0.002058395417407155, 0.0018607871606945992, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -25988, -3856, 2025, -8445, 12150, -13373, 22649, -8637, 12537, -7313, 12167, 12486, -3187, -31858, 1346, 3293, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 6.3647756178397685e-05, 5.3426650993060321e-05, 5.7668738008942455e-05, 5.6985532864928246e-05, 8.537212124792859e-05, 0.00014127772010397166, 5.5796022934373468e-05, 4.9238577048527077e-05, 0.00010158820077776909, 7.9374069173354656e-05, 9.7218835435342044e-05, 6.7749184381682426e-05, 8.3854043623432517e-05, 6.7665590904653072e-05, 6.8905595981050283e-05, 7.0850095653440803e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 9,28,1,30,-9,-60,-2,-17,-15,-59,6,1,55,-58,55,39,-89,-28,45,12,69,21,-55,18,-17,51,127,73,23,79,62,-44,13,7,12,-33,33,34,-2,-18,119,21,23,-29,-16,2,22,-44,12,-32,97,8,-75,17,35,32,2,-32,5,27,-3,26,-69,-22,15,5,51,43,11,-33,31,12,6,45,15,44,45,-39,34,31,-6,51,39,41,-55,1,-3,71,3,18,-77,-10,23,0,107,50, 
  /* [1][0][][] */ 17,24,-41,-27,-7,-47,85,-71,-75,-41,-77,-56,-6,-51,-9,-37,-41,-36,-49,-14,-22,-98,115,-20,5,6,-13,47,-48,1,-31,11,-15,19,19,-8,-13,49,-58,87,41,15,-10,-37,40,-62,-2,29,-86,8,45,-106,-26,36,65,48,25,16,-78,31,-50,-9,-25,-10,41,17,104,7,-50,-127,17,0,20,53,-27,26,-49,-15,101,-25,37,-9,45,-48,-38,-54,-8,20,-14,-47,34,8,54,-45,-48,41, 
  /* [2][0][][] */ -6,-29,6,-19,77,59,-54,11,-46,60,14,-28,25,-14,14,44,41,-24,-127,-5,-25,-31,1,42,13,-25,-33,31,-28,-9,-10,80,-25,-29,11,12,-64,42,-23,-32,72,4,12,39,11,53,-10,-19,-81,20,-6,19,-27,60,0,-55,33,30,63,19,-16,-10,-20,47,28,7,-40,0,7,7,5,-26,31,61,36,74,-47,-27,-28,-38,54,43,77,-30,-7,-32,-13,-41,-25,-36,-12,77,-5,-4,83,-51, 
  /* [3][0][][] */ 44,-47,-31,-101,10,-20,99,-45,12,127,-78,-3,-4,-15,-17,57,64,28,-20,3,-56,7,32,8,-48,61,47,-15,-51,-11,-49,52,-18,-30,16,-10,6,-47,-11,54,-8,1,-17,10,42,-60,-13,20,38,-6,23,-22,113,43,16,-17,-10,-14,-20,-39,-20,21,58,3,-51,-41,103,-13,-28,-27,-39,14,17,-81,7,-82,14,-54,109,-5,-20,-58,-21,-46,-28,-52,58,71,-53,51,-64,-14,10,-92,-24,25, 
  /* [4][0][][] */ -28,67,26,20,-10,18,-48,-28,25,-30,13,-22,13,35,-25,12,1,-36,-6,-61,15,-22,-68,14,-30,-22,-16,14,-27,127,-63,-27,-4,-46,6,-39,58,48,-35,4,26,3,23,-28,-58,-6,47,-32,26,-28,-52,-22,-78,39,32,29,-7,67,-23,14,-46,-60,-15,12,61,18,-74,-4,2,5,8,-62,-5,70,61,69,-40,9,-68,37,27,56,40,-56,50,-55,-38,-75,-28,-51,-58,-12,-9,18,46,-28, 
  /* [5][0][][] */ 5,-1,49,-17,-20,-30,-18,12,36,-3,-25,-10,-7,-21,31,-23,-13,-5,-50,-25,-14,14,-28,12,21,-32,56,-11,-5,28,10,72,-6,-72,14,9,-25,-36,-36,9,-44,5,-30,14,7,26,-57,29,-11,14,38,-3,30,-79,5,16,-21,-62,1,-29,33,21,21,43,-26,9,111,-31,-14,-28,3,4,-9,15,26,13,-7,-1,127,37,-33,-17,-39,26,37,52,3,77,12,-34,-14,10,10,-6,-25,22, 
  /* [6][0][][] */ 7,-67,56,12,-25,124,-37,-110,-28,-60,-66,74,-10,-3,-39,98,11,51,7,-47,-101,-27,-72,-45,17,-62,11,53,-110,67,-28,-26,39,75,-21,12,-11,-22,31,-35,-72,23,43,-40,14,34,-107,-10,47,-10,-76,-127,88,21,-43,-29,28,-12,22,0,-17,-28,52,9,44,-80,-81,-51,-77,15,0,-85,-22,-114,42,-96,92,-6,-89,49,-12,86,39,-91,75,-32,-10,5,-86,82,-69,107,26,-38,62,-110, 
  /* [7][0][][] */ -27,-28,-80,70,-20,12,58,-15,-109,17,107,75,-18,-76,5,-21,-5,1,0,0,-49,-40,-31,-37,84,35,-9,92,-6,52,25,45,-63,-127,43,115,-5,34,-30,-8,-29,-16,18,-100,45,54,59,87,-14,63,-48,5,40,-35,63,-75,-19,51,-87,-32,76,8,12,-52,61,-73,97,-3,-57,-15,91,19,-12,-48,-71,-39,28,-58,87,-37,15,-14,-65,-41,56,33,-79,59,-25,21,16,48,74,-10,98,-18, 
  /* [8][0][][] */ 0,-44,16,15,-17,-13,10,1,-6,-13,41,32,24,22,-30,-14,65,-10,21,-9,-18,-70,-38,-27,-27,-23,73,-5,-23,33,-2,-24,-17,-9,-8,-7,-54,-24,7,-12,-11,31,33,-41,19,-14,32,-10,37,-9,39,-4,-13,8,-44,7,-21,92,-65,-15,-21,-60,-49,-3,-75,-37,-10,11,-19,-2,29,-19,-38,-127,29,-85,0,19,-50,14,-34,-15,-5,48,59,-53,-44,35,-24,84,3,-19,-53,5,6,-59, 
  /* [9][0][][] */ -36,-36,-39,23,15,27,-3,27,-48,12,71,65,-36,48,20,-39,-14,23,-21,-53,-9,28,4,15,-31,14,19,5,25,4,24,-19,-15,-31,-4,64,-30,4,34,-11,-16,-35,23,-8,-1,38,-7,30,-52,2,-13,22,117,30,-21,-7,8,-3,29,23,-44,-8,74,19,2,12,53,17,42,-15,-14,12,14,-125,-28,-127,-24,-24,30,2,4,36,13,-34,44,21,-48,3,-14,118,45,34,41,25,-17,20, 
  /* [10][0][][] */ 29,41,12,-1,-8,0,-31,-37,74,13,-41,23,33,8,-17,-53,-27,0,18,4,32,-24,-32,-39,5,-9,-100,48,-15,65,-7,7,8,30,-8,14,8,5,3,6,38,0,50,-37,-21,-13,3,30,36,6,13,-33,-33,-23,1,31,0,8,-7,-7,-12,-43,-20,11,-8,-16,-102,-15,-50,-19,51,-22,-23,40,39,13,52,-32,-99,24,-16,35,12,-6,7,2,-64,-127,-18,12,10,23,57,-40,28,43, 
  /* [11][0][][] */ 27,-47,5,20,-59,32,15,5,87,-21,-30,-40,28,2,23,-19,-20,46,37,-54,7,26,8,-35,31,24,61,4,41,-62,-19,30,3,123,-89,8,9,-20,62,13,-62,52,-17,2,-39,11,-10,-18,63,-10,-17,-13,-32,10,-83,84,-36,-2,4,-47,35,-9,-3,-86,-8,-50,-127,-89,-2,-21,-89,43,53,12,-5,-9,23,53,-118,-47,-22,-12,-6,-15,-13,-13,49,71,23,-48,2,6,-27,20,98,32, 
  /* [12][0][][] */ 14,39,-43,-12,29,-23,8,25,51,-28,28,-5,-12,-16,-1,9,8,-45,-34,3,10,53,8,60,-55,-40,-127,-20,71,-33,37,-12,-24,-85,69,0,25,-9,8,18,-8,-53,10,42,36,-7,25,-12,-82,15,-54,109,86,-19,26,-81,24,32,-38,-32,23,42,76,6,-23,-27,28,39,124,16,21,32,15,-22,-1,-7,-41,-54,37,-79,18,-51,28,-26,-2,15,8,-108,-15,46,-51,34,11,62,9,32, 
  /* [13][0][][] */ -23,10,-88,27,37,28,1,-7,44,84,-29,59,-63,-28,52,-41,19,50,66,23,-34,-29,1,25,39,39,-23,12,13,56,66,-30,-18,70,8,51,15,-27,-41,-65,2,-12,25,5,41,50,-44,39,-60,34,5,20,-14,-41,64,33,14,-35,-11,-22,20,38,0,-34,6,89,127,45,39,16,-50,-27,53,61,-70,52,20,-88,123,-40,-2,-34,35,0,43,56,-31,-11,-29,-28,20,63,34,8,66,50, 
  /* [14][0][][] */ -22,40,5,23,-53,-34,28,25,-91,-10,82,14,-89,-2,73,-15,-48,43,-50,17,-17,22,-80,16,-54,-16,-39,-113,14,4,27,83,-50,28,19,-6,-28,-59,-5,-53,36,-32,50,-8,-6,44,-77,19,-29,-28,92,34,-9,37,-17,29,-59,37,-4,32,35,66,-3,39,-2,-55,-11,-55,53,61,81,38,-39,21,19,23,32,-23,23,22,-60,123,-7,-127,79,7,5,11,-117,-10,-21,9,-37,17,26,21, 
  /* [15][0][][] */ 76,-22,22,44,42,9,1,-10,39,30,-56,-16,65,62,6,-30,4,-2,-63,56,9,-43,7,32,67,-27,91,26,38,-32,-42,67,52,58,0,-76,64,67,72,52,79,38,-21,0,-36,-121,35,-35,-11,-14,-5,-11,-18,-52,-31,52,-1,10,-1,3,2,-62,-21,29,40,48,-81,41,-2,-32,-7,-9,11,-119,-33,-112,-35,14,-127,21,81,-42,54,21,-41,-13,-17,-33,35,102,4,-81,-14,-41,51,-33, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0027050294447690248, 0.0022706326562911272, 0.0024509213399142027, 0.0024218850303441286, 0.0036283151712268591, 0.0060043027624487877, 0.0023713309783488512, 0.0020926394499838352, 0.0043174983002245426, 0.0033733979798853397, 0.0041318004950881004, 0.0028793402016162872, 0.0035637966357171535, 0.0028757874388247728, 0.0029284877236932516, 0.0030111288651823997, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 13737, -1024, -6624, 10228, -521, 2928, 761, -4133, 4065, -7091, -329, -4268, 14863, -5658, -1707, -13081, -775, -388, -13934, 825, -4629, 881, -8263, 1375, 101, 11164, -17527, -7420, 303, -4503, -1586, -397, 26271, 23, -8065, -694, 1486, 16086, 4406, 18966, -1586, 9068, -1084, 12180, 1602, -2045, 16497, 357, -10735, -602, -5637, -1692, -594, -4332, -2606, 5126, -3025, 3555, -449, 4924, 1716, -1706, 1161, 13940, 11640, 1239, 18848, 9889, -2179, 309, 11151, -2488, -141, 1093, -4906, 924, 20016, 21636, 16292, 20547, 22681, -2361, 13158, 13629, -1140, -1259, 17502, -9961, 24617, -471, -11943, 1221, -968, -1058, 26145, -3685, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 7.2917340730782598e-05, 0.00018660008208826184, 0.00014660626766271889, 0.00012219580821692944, 0.00011554684897419065, 0.000345802545780316, 8.2187645602971315e-05, 0.00011155749234603718, 0.00025636152713559568, 0.00012487404455896467, 0.0001926643744809553, 0.00013485563977155834, 6.011280493112281e-05, 7.9562996688764542e-05, 0.0001542973768664524, 9.4900802650954574e-05, 0.00019540074572432786, 0.00019935236196033657, 8.1486054114066064e-05, 0.00020474239136092365, 0.00015771808102726936, 0.00015652707952540368, 7.4416086135897785e-05, 0.00012864112795796245, 0.0011386820115149021, 9.392458014190197e-05, 0.00012550312385428697, 0.00010735171963460743, 0.00019616811187006533, 0.00010795189155032858, 0.00012199496268294752, 0.0001814696443034336, 3.8834532460896298e-05, 0.00030644342768937349, 6.8958688643760979e-05, 0.0001272641820833087, 0.00021551399549935013, 7.9482619185000658e-05, 0.00017576086975168437, 5.8650886785471812e-05, 0.00046794934314675629, 0.00011099490075139329, 0.00015235978935379535, 7.0861053245607764e-05, 8.7220294517464936e-05, 0.00019740179413929582, 8.84280088939704e-05, 0.00017025538545567542, 0.00010496380127733573, 0.00027790263993665576, 0.00018984416965395212, 0.00014607988123316318, 0.00010778884461615235, 0.00018329029262531549, 0.00017296017904300243, 0.00015273148892447352, 8.9665627456270158e-05, 0.00027243504882790148, 0.00024039181880652905, 0.00018081748567055911, 0.00017283300985582173, 0.00020221620798110962, 0.0001167345981230028, 6.0327594837872311e-05, 0.00017749656399246305, 0.00024017164832912385, 8.3964849181938916e-05, 0.00013707480684388429, 0.00016868226521182805, 0.00026673206593841314, 9.988350939238444e-05, 0.00017769898113328964, 0.00028522877255454659, 0.00011838436330435798, 0.00010754487448139116, 0.00013960232899989933, 6.2270635680761188e-05, 7.7720163972117007e-05, 8.1011014117393643e-05, 8.4447638073470443e-05, 5.9133246395504102e-05, 0.00019042553321924061, 8.1605889135971665e-05, 0.0001977267675101757, 5.9877693274756894e-05, 0.00021828991884831339, 7.3699229687917978e-05, 0.00014963182911742479, 4.5987559133209288e-05, 0.00017538951942697167, 6.4444429881405085e-05, 0.00015739542141091079, 0.00020877929637208581, 0.00010345013288315386, 6.7209999542683363e-05, 0.00021390522306319326, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -50,-14,-17,-54,115,-9,8,3,-14,-1,0,-4,-5,20,-7,-12,-8,13,1,-12,1,13,13,29,-7,-24,-21,12,26,13,30,-7,-44,11,18,-11,-4,-34,-42,24,8,-5,44,-55,-45,46,-89,-6,-3,11,7,60,-73,-18,51,-24,29,-16,10,-34,-13,3,4,-88,-10,-15,-42,-28,-12,16,22,-12,40,19,-14,-12,-45,-19,127,-54,-121,16,-83,-16,-14,-19,-1,26,-84,-4,24,-32,5,44,-12,17, 7,47,24,-54,-31,-19,127,-38,-5,-19,-34,12,-41,-8,-93,127,-2,77,67,-16,-17,127,39,88,21,-10,70,70,127,58,127,-22,-127,-13,-74,-38,-33,-54,127,-83,-13,-95,-5,-84,87,-21,-24,13,69,3,21,127,-71,44,-77,-15,-68,-3,2,13,-20,-117,-119,-17,-61,-9,1,-52,-14,15,-53,124,-127,-13,-2,-24,-127,-127,-5,-85,-126,-2,45,-73,92,68,-45,33,-127,-9,24,-33,15,127,-28,-67, -5,-7,3,-9,74,-1,35,-11,-27,0,-1,16,-21,15,-11,-13,-4,-10,-4,-19,3,20,-20,16,4,-8,18,-15,-1,22,14,17,-35,-1,6,77,-13,-56,-25,-20,10,19,33,-42,-6,-11,-63,-31,3,-6,7,43,18,1,23,-24,86,-8,17,-39,-28,9,-59,-30,-19,-50,127,-6,-7,11,-7,-4,31,-5,-2,33,10,28,-44,-48,-43,10,-96,-4,4,-38,-10,-29,-82,-40,-17,33,4,34,14,23, 
  /* [0][1][][] */ -127,-20,52,-45,38,83,-19,-8,-9,-19,-15,-2,-127,43,22,108,-12,45,80,8,31,-31,70,-33,27,31,83,23,-21,2,15,-11,-112,-15,112,-22,-18,-65,-53,-127,-7,-24,101,-56,-100,127,-127,-73,80,63,23,-28,-119,45,85,-41,51,-35,43,-26,5,-6,72,-127,-34,23,-28,-62,2,-4,-127,11,101,127,-5,-92,-103,-104,-67,-83,-42,2,-14,-54,48,28,-127,43,-125,127,82,-116,127,16,-33,7, 119,127,127,127,-127,-127,75,-47,127,127,-74,-51,-93,127,-30,122,127,-127,127,127,127,-102,40,-127,-127,-127,127,127,-123,127,-21,127,-54,127,127,-120,127,115,-4,-42,127,-20,-127,-121,127,-12,110,127,127,-127,127,-96,85,127,-127,127,-127,127,-127,127,-127,127,71,-115,127,127,-23,127,-93,-127,-4,-127,22,127,127,72,26,-125,95,-127,35,127,127,127,127,66,-122,127,-85,46,16,-50,-84,-8,-127,-19, -124,-40,13,-61,9,65,-64,4,-40,-17,6,127,-107,30,12,90,-18,62,66,3,27,-24,52,-29,35,28,35,11,-18,-17,22,-30,-69,-27,120,127,-15,-66,-75,-76,-13,-27,41,-37,-91,-51,-61,-104,71,71,0,-21,127,25,118,-59,127,-19,61,-60,-13,-39,-127,-92,-68,-22,-68,-37,-6,7,-105,-9,26,-80,6,127,-46,-70,-46,32,-82,-7,-61,-71,19,18,-108,30,-52,-66,127,127,-48,-5,-61,6, 
  /* [0][2][][] */ -21,-46,-3,-35,35,-19,10,28,-20,22,40,-9,5,2,-12,-52,3,-10,-49,-38,2,-11,41,-20,14,12,5,-12,-10,-22,-24,4,34,-6,16,-9,-15,-27,-16,-38,-31,-8,36,-6,13,15,-62,16,-14,4,-28,-2,7,-36,40,-26,40,-28,10,-34,-17,25,-11,25,-36,-35,117,9,37,20,16,22,15,-22,-20,-27,-33,-2,-28,-49,-76,9,-100,-23,-22,8,21,-23,-35,-6,19,-7,-19,-16,-18,6, -11,-58,34,-104,-35,-11,21,127,-60,84,127,-5,-78,24,127,96,-4,-45,47,-72,-29,-40,127,-6,6,7,28,5,-19,-6,-79,-60,-99,-26,-92,8,-103,-127,63,-109,-28,-127,-33,127,7,-11,-43,18,46,-18,-20,-5,51,33,-36,-54,-29,-59,55,-72,121,24,71,37,-98,-65,-29,-23,127,21,-8,32,50,-25,10,-37,-27,-45,0,76,-127,-19,-109,-86,56,-127,-33,-3,-68,-3,68,-7,21,-94,-68,127, 5,5,-29,-7,35,-8,-10,27,-25,14,16,49,27,-1,-8,-55,3,6,-27,-47,8,10,36,-10,-4,11,-33,-18,-5,-14,-19,0,35,10,29,11,-16,-86,-22,41,-22,-24,14,18,-5,8,-81,14,-9,0,-11,-14,-12,-20,48,-26,76,-6,18,-37,-11,20,-5,53,-14,-38,-28,9,33,12,1,12,-67,-24,-10,-28,-20,-3,99,14,-10,5,-53,-16,6,9,25,1,-19,7,8,1,8,-23,-30,-13, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0049830684438347816, 0.012751986272633076, 0.010018865577876568, 0.0083506889641284943, 0.0078963087871670723, 0.023631658405065536, 0.0056165880523622036, 0.0076236817985773087, 0.017519386485219002, 0.0085337162017822266, 0.013166411779820919, 0.0092158447951078415, 0.0041080242954194546, 0.0054372232407331467, 0.010544465854763985, 0.0064853872172534466, 0.013353412039577961, 0.01362345926463604, 0.0055686421692371368, 0.013991806656122208, 0.010778231546282768, 0.010696840472519398, 0.0050854906439781189, 0.0087911533191800117, 0.077815927565097809, 0.0064186733216047287, 0.0085767069831490517, 0.0073362654075026512, 0.013405852019786835, 0.0073772803880274296, 0.008336964063346386, 0.012401379644870758, 0.0026538972742855549, 0.02094191312789917, 0.0047125397250056267, 0.0086970552802085876, 0.014727923087775707, 0.0054317303001880646, 0.012011250481009483, 0.0040081189945340157, 0.031978998333215714, 0.0075852354057133198, 0.01041205320507288, 0.0048425444401800632, 0.0059605119749903679, 0.013490160927176476, 0.0060430457815527916, 0.011635012924671173, 0.0071730781346559525, 0.018991474062204361, 0.012973682954907417, 0.009982893243432045, 0.00736613804474473, 0.012525800615549088, 0.011819855310022831, 0.010437455028295517, 0.0061276224441826344, 0.018617827445268631, 0.016428038477897644, 0.012356812134385109, 0.011811164207756519, 0.013819171115756035, 0.0079774782061576843, 0.0041227028705179691, 0.012129864655435085, 0.016412992030382156, 0.0057380395010113716, 0.0093674995005130768, 0.011527508497238159, 0.018228093162178993, 0.0068258983083069324, 0.012143697589635849, 0.019492132589221001, 0.0080902203917503357, 0.0073494650423526764, 0.0095402263104915619, 0.0042554875835776329, 0.0053112865425646305, 0.0055361785925924778, 0.0057710325345396996, 0.0040410826914012432, 0.013013412244617939, 0.0055768312886357307, 0.013512369245290756, 0.0040919571183621883, 0.014917626045644283, 0.0050365016795694828, 0.01022562850266695, 0.0031427249778062105, 0.011985872872173786, 0.004404041450470686, 0.010756181553006172, 0.014267683029174805, 0.0070696361362934113, 0.0045930366031825542, 0.014617981389164925, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 1833, 11322, 254, 3181, 6420, 20760, 135, 2311, 32213, -1477, 22545, 6234, 2535, 987, 8851, 1258, 4525, 9218, -201, 24071, 2412, 18728, -1670, 3415, -15695, 2465, 5271, 2321, 12624, 2608, 6225, 6523, 3167, 19039, 6138, 7650, 10183, 4222, 7883, 6140, 34167, 2078, 3070, 3287, 7640, 15119, 10087, 14535, 1945, -1616, 3063, 7818, 3646, -6011, 14561, 810, 2985, 18712, 2659, 3994, 5689, 16290, 6955, -425, 22289, 25333, 3457, 6059, 9085, 8255, 3998, 2468, -6490, 5300, 4646, 4992, 296, 10512, 6627, 8118, 5656, 1186, 8793, 35606, -672, 19189, 6942, 3653, -1559, 3992, 1401, 20419, 7051, 3861, 10414, 9541, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00013441764167509973, 6.579853652510792e-05, 0.00018661881040316075, 0.00012670751311816275, 9.2947957455180585e-05, 4.2333489545853809e-05, 0.00014944422582630068, 0.0001128608055296354, 2.8930620828759857e-05, 0.0001089262223104015, 3.4200424124719575e-05, 6.9165129389148206e-05, 0.00011148725025122985, 0.00021403821301646531, 6.6490341851022094e-05, 8.8603439508005977e-05, 0.00012018745474051684, 7.2600028943270445e-05, 0.00012099528248654678, 3.8079997466411442e-05, 0.00011924182763323188, 4.2559058783808723e-05, 0.00011331238783895969, 9.2275222414173186e-05, 4.6370740165002644e-05, 7.2834249294828624e-05, 0.00010377083526691422, 0.00013221721746958792, 7.1094473241828382e-05, 0.00011200687731616199, 8.72136588441208e-05, 8.434435585513711e-05, 0.00011355227616149932, 4.2541538277873769e-05, 8.0819438153412193e-05, 7.4382638558745384e-05, 6.1208862462081015e-05, 0.0001014632944134064, 7.2735048888716847e-05, 7.5538286182563752e-05, 2.8323964215815067e-05, 0.00010895962623180822, 0.00010590119200060144, 7.0856527599971741e-05, 5.1115635869791731e-05, 5.3721611038781703e-05, 6.8724810262210667e-05, 5.0061160436598584e-05, 0.00012455115211196244, 0.00012626597890630364, 0.00013867381494492292, 8.5234627476893365e-05, 0.00011886787251569331, 7.9321231169160455e-05, 5.0441209168639034e-05, 0.00015722298121545464, 9.3904869572725147e-05, 4.6088418457657099e-05, 9.043983300216496e-05, 8.3040999015793204e-05, 8.8776192569639534e-05, 5.3414558351505548e-05, 9.6508796559646726e-05, 8.5689222032669932e-05, 4.0746555896475911e-05, 3.7682166293961927e-05, 0.00012868751946371049, 9.3395719886757433e-05, 7.9030702181626111e-05, 6.7001819843426347e-05, 0.00011163864837726578, 7.9724370152689517e-05, 8.6416672274935991e-05, 0.00010873509745579213, 8.5803818365093321e-05, 0.00012578524183481932, 0.00011903610720764846, 7.284149614861235e-05, 9.2391586804296821e-05, 9.8747594165615737e-05, 8.2930273492820561e-05, 9.30008027353324e-05, 6.5167012508027256e-05, 2.8245131034054793e-05, 6.2864768551662564e-05, 4.2109670175705105e-05, 9.4636525318492204e-05, 0.0001284304162254557, 0.00011058372911065817, 0.00012940670421812683, 0.00012088634684914723, 4.19230418629013e-05, 7.7397395216394216e-05, 9.8648051789496094e-05, 5.9052479628007859e-05, 6.0778475017286837e-05, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 30,0,14,53,-127,-2,102,42,58,98,-3,62,26,27,10,85, 
  /* [1][0][][] */ -26,48,-100,-15,127,92,11,-6,-46,23,-65,16,-70,67,-57,-22, 
  /* [2][0][][] */ -48,64,65,-10,56,102,-4,25,36,-18,51,-12,52,-127,-21,3, 
  /* [3][0][][] */ 127,-16,35,-10,18,43,-19,-1,51,42,-64,-26,-48,35,-40,38, 
  /* [4][0][][] */ -77,-8,-9,58,-116,-31,-68,-8,-22,16,10,-58,-1,48,-28,127, 
  /* [5][0][][] */ -100,27,21,19,126,11,22,21,-72,38,-33,-5,-51,61,-127,-37, 
  /* [6][0][][] */ -127,37,-24,27,-9,-73,68,28,4,-16,-55,27,12,-14,-43,5, 
  /* [7][0][][] */ 11,78,47,-102,66,38,127,30,53,-19,-29,55,79,10,-29,8, 
  /* [8][0][][] */ -61,-45,-94,80,-74,76,-49,-76,10,-55,127,43,126,78,-99,21, 
  /* [9][0][][] */ -28,-127,-15,93,-42,-61,-8,52,55,29,22,66,-67,24,-20,-47, 
  /* [10][0][][] */ -55,-44,-127,64,-114,86,31,-68,-7,-70,73,-64,11,80,-55,99, 
  /* [11][0][][] */ -63,-121,-11,39,15,74,34,19,-7,21,18,-98,-9,113,-85,127, 
  /* [12][0][][] */ -50,-86,-43,127,-79,-120,-16,26,62,95,-3,106,-8,-28,-35,-16, 
  /* [13][0][][] */ -56,-28,-25,2,-9,7,26,13,-10,127,-4,-13,42,38,21,-18, 
  /* [14][0][][] */ -125,-42,-31,-26,-31,92,-28,-117,127,-45,65,0,95,-31,-61,-96, 
  /* [15][0][][] */ -5,-127,112,-63,-66,-47,-3,48,21,-51,-102,-39,84,-51,-38,-64, 
  /* [16][0][][] */ -37,-22,8,-59,38,48,-23,-30,49,-127,52,-11,-26,15,-85,-79, 
  /* [17][0][][] */ -1,3,43,-65,23,-11,-49,-4,127,-51,39,95,89,-101,-25,-114, 
  /* [18][0][][] */ 48,20,-52,-127,5,-9,124,-56,9,36,-16,38,-18,49,-23,-91, 
  /* [19][0][][] */ -38,-24,-54,-66,-112,29,12,19,11,-54,39,-127,-30,-10,-19,19, 
  /* [20][0][][] */ 38,99,98,-127,87,6,-63,75,-97,-119,22,-126,-66,102,-42,-33, 
  /* [21][0][][] */ 8,-68,-127,-14,67,66,80,70,-95,-89,-13,-5,112,-116,-38,32, 
  /* [22][0][][] */ 65,5,81,-22,17,-2,67,19,28,127,15,10,-17,-13,84,-13, 
  /* [23][0][][] */ -87,-46,-37,49,66,37,10,-8,9,6,3,-66,-5,56,63,127, 
  /* [24][0][][] */ 36,-21,25,34,7,-112,6,-40,5,127,-115,86,-36,-63,94,-56, 
  /* [25][0][][] */ 127,-50,118,103,62,8,-17,52,-119,93,32,-64,-27,13,79,-5, 
  /* [26][0][][] */ -31,35,3,33,-65,127,-8,35,-65,-40,-91,24,-1,12,40,-126, 
  /* [27][0][][] */ 40,1,-20,-44,-48,-4,-60,11,-78,-34,-49,-28,-58,44,-13,127, 
  /* [28][0][][] */ -59,31,22,-8,15,-3,-127,-14,7,-25,-2,3,6,-53,-64,-35, 
  /* [29][0][][] */ -27,-127,-27,97,-37,10,122,1,71,59,-105,72,21,-23,-40,77, 
  /* [30][0][][] */ 23,-38,-67,-3,-127,31,51,-18,24,-13,-10,-28,-18,46,-6,78, 
  /* [31][0][][] */ -127,-29,15,111,-53,-3,-62,17,-16,-73,-5,-52,-10,-70,-32,82, 
  /* [32][0][][] */ -127,-101,-92,12,-119,-66,14,-4,115,41,-34,-55,55,64,49,-2, 
  /* [33][0][][] */ -23,30,-102,26,-127,-85,70,-26,-115,10,-34,-72,-15,110,62,89, 
  /* [34][0][][] */ 28,44,13,62,-61,-66,15,29,20,-127,2,55,-25,17,59,101, 
  /* [35][0][][] */ 23,6,-82,-18,-127,29,116,-27,5,38,-17,-30,11,92,18,88, 
  /* [36][0][][] */ 13,6,-96,48,127,-38,66,58,-125,-15,-122,-119,24,-46,9,49, 
  /* [37][0][][] */ -125,74,8,-103,65,-88,-26,-58,3,-34,-44,40,43,-107,4,-127, 
  /* [38][0][][] */ 23,64,24,-52,-91,-66,-127,-46,-43,-52,41,50,-75,-85,68,-1, 
  /* [39][0][][] */ 13,-51,10,83,-4,81,98,-58,-16,44,34,-9,3,127,63,114, 
  /* [40][0][][] */ 120,60,59,61,-75,-45,20,3,-100,51,9,-12,-68,-41,127,31, 
  /* [41][0][][] */ -12,-29,29,75,-91,108,13,69,-71,39,-105,28,28,52,69,-127, 
  /* [42][0][][] */ -8,-75,6,-2,127,15,75,28,-41,-102,-72,-15,2,5,-22,48, 
  /* [43][0][][] */ -19,-106,-32,19,127,-2,4,103,-48,-61,-98,-62,104,6,-44,77, 
  /* [44][0][][] */ -61,-87,-57,-82,60,61,87,40,-62,-106,-69,101,-21,86,54,127, 
  /* [45][0][][] */ 5,-56,-81,-1,-127,77,-24,-76,58,-42,36,-33,11,28,-49,39, 
  /* [46][0][][] */ 36,-60,-3,-4,85,-61,-37,72,15,-16,29,87,-63,-59,36,-127, 
  /* [47][0][][] */ -112,-52,-27,109,-28,-2,56,71,-31,120,63,68,-16,115,7,127, 
  /* [48][0][][] */ 37,-4,-95,-105,26,-59,15,47,40,-91,8,16,-62,-6,-55,-127, 
  /* [49][0][][] */ 57,33,9,34,-26,-30,39,32,-28,127,-37,22,-53,-37,80,79, 
  /* [50][0][][] */ -4,10,5,4,-127,-18,-8,-43,43,18,15,41,-24,-65,17,2, 
  /* [51][0][][] */ 25,2,-2,-127,-26,98,40,-49,2,7,14,-55,63,53,-4,14, 
  /* [52][0][][] */ 16,-38,12,-66,92,-115,-18,-16,49,-4,127,-42,42,14,-21,78, 
  /* [53][0][][] */ -33,-72,58,-9,-32,-127,18,-85,8,70,-74,89,-16,-2,42,-70, 
  /* [54][0][][] */ 50,93,46,-42,-116,-23,-78,-127,-27,37,68,92,-95,-72,55,26, 
  /* [55][0][][] */ 11,24,-47,88,-47,18,54,-19,-9,127,29,47,10,18,-8,63, 
  /* [56][0][][] */ 80,-127,-59,96,-64,22,-37,43,124,47,40,68,-30,-60,76,91, 
  /* [57][0][][] */ 30,18,72,-73,57,21,-13,-9,83,-35,28,127,36,-35,95,-48, 
  /* [58][0][][] */ 53,-79,21,-43,45,-4,-1,127,42,80,17,82,56,38,107,6, 
  /* [59][0][][] */ -29,24,31,-31,13,-84,3,13,14,21,-99,-74,-127,-71,79,-16, 
  /* [60][0][][] */ 27,-13,7,17,-4,-14,21,-72,27,127,4,65,-15,-26,-35,-34, 
  /* [61][0][][] */ 65,29,28,-5,-56,-127,-34,-41,-32,9,-21,32,-55,-17,90,58, 
  /* [62][0][][] */ -19,76,-30,60,-53,127,-62,34,-55,7,-37,50,-30,58,66,-105, 
  /* [63][0][][] */ 14,-16,-82,-127,-14,-64,108,-2,-19,-125,-28,55,-29,99,34,-19, 
  /* [64][0][][] */ -45,35,-8,-39,34,-38,37,56,-127,-24,-73,-49,-41,63,35,65, 
  /* [65][0][][] */ -39,22,-15,-40,62,14,-59,-101,-105,-46,6,-27,-127,97,-61,41, 
  /* [66][0][][] */ -9,52,-7,37,-52,127,-33,12,-54,17,-20,55,-22,55,62,-89, 
  /* [67][0][][] */ 35,-29,-25,-50,31,-88,62,-88,14,46,-9,116,-53,-40,-20,-127, 
  /* [68][0][][] */ 5,-127,-24,59,-4,10,34,70,35,52,64,28,-49,50,-10,-8, 
  /* [69][0][][] */ 36,59,80,-93,45,-1,-24,86,48,67,19,45,83,-107,17,-127, 
  /* [70][0][][] */ 38,32,47,-47,122,16,-95,-76,-122,-111,-9,42,-37,70,-127,-18, 
  /* [71][0][][] */ -30,-58,29,-25,83,-4,40,8,-127,118,-123,-38,35,121,-22,64, 
  /* [72][0][][] */ -2,20,74,29,-42,-44,-85,-40,-4,66,0,45,42,125,-127,10, 
  /* [73][0][][] */ -11,-24,-27,-47,27,-110,35,-43,57,73,99,-25,7,-31,-62,127, 
  /* [74][0][][] */ -7,18,-46,69,-102,12,114,17,67,50,43,107,127,21,-73,22, 
  /* [75][0][][] */ -24,50,-36,21,-56,127,-7,13,-34,24,-46,27,-24,37,18,-59, 
  /* [76][0][][] */ -67,105,-30,47,-83,-25,-38,36,73,70,-53,-44,35,-66,-127,24, 
  /* [77][0][][] */ 117,81,-87,127,91,45,78,58,28,21,81,-50,56,42,81,31, 
  /* [78][0][][] */ 15,-42,10,-55,70,-127,31,-54,46,58,117,-26,6,-9,-30,122, 
  /* [79][0][][] */ -25,66,-8,24,8,-53,-19,9,-127,-15,42,2,103,45,-54,-26, 
  /* [80][0][][] */ -83,23,92,-1,35,62,-12,-127,-72,58,-76,-56,-26,-92,29,56, 
  /* [81][0][][] */ 93,59,-9,11,33,-38,64,115,-90,127,-56,-26,-45,38,123,102, 
  /* [82][0][][] */ 67,90,-14,-86,-6,-20,87,-127,45,39,-72,70,111,-40,46,-68, 
  /* [83][0][][] */ 4,-54,14,46,-6,17,-47,-103,61,-57,127,32,54,-59,-47,-127, 
  /* [84][0][][] */ -127,-114,-28,-14,14,111,78,7,99,87,96,126,79,100,-72,-4, 
  /* [85][0][][] */ 82,14,75,-85,80,-17,-56,89,33,127,-71,-13,-42,45,100,5, 
  /* [86][0][][] */ -57,52,-19,11,37,69,23,19,90,45,127,-6,-17,69,5,-10, 
  /* [87][0][][] */ 4,-52,19,-53,45,-127,16,-33,40,-8,64,-46,28,-54,-48,72, 
  /* [88][0][][] */ -71,43,37,14,101,-39,18,21,-53,-77,116,-49,70,127,112,-112, 
  /* [89][0][][] */ -16,27,-7,42,-30,127,-25,36,-40,22,-38,34,4,77,28,-101, 
  /* [90][0][][] */ 56,-74,37,7,127,2,27,40,4,-61,-91,-13,-26,-20,-40,11, 
  /* [91][0][][] */ -31,39,-22,-15,19,-53,-90,18,-95,23,-100,-127,-102,-52,-26,33, 
  /* [92][0][][] */ 88,35,77,54,-127,-107,38,24,-18,42,-12,-19,-11,-71,45,9, 
  /* [93][0][][] */ 13,-127,-76,68,-24,-33,-1,91,107,66,-4,68,-34,53,-34,-52, 
  /* [94][0][][] */ 84,14,127,-35,38,-19,-3,38,24,98,-14,49,1,-1,95,-11, 
  /* [95][0][][] */ -46,-53,-46,-24,127,9,69,92,-55,-32,-109,-55,41,22,-84,52, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0042271525599062443, 0.0020692257676273584, 0.0058687692508101463, 0.003984685055911541, 0.0029230178333818913, 0.0013312993105500937, 0.00469970703125, 0.0035492351744323969, 0.00090980721870437264, 0.0034255008213222027, 0.0010755314724519849, 0.0021750980522483587, 0.0035060397349298, 0.0067310519516468048, 0.002090981462970376, 0.0027863918803632259, 0.0037796429824084044, 0.0022831184323877096, 0.0038050473667681217, 0.0011975358938798308, 0.0037499049212783575, 0.0013383929617702961, 0.003563436446711421, 0.002901861909776926, 0.0014582623261958361, 0.0022904840297996998, 0.0032633747905492783, 0.004157953429967165, 0.0022357718553394079, 0.0035223809536546469, 0.0027426863089203835, 0.0026524527929723263, 0.00357098039239645, 0.0013378419680520892, 0.002541601425036788, 0.0023391777649521828, 0.0019248900935053825, 0.0031908072996884584, 0.0022873643320053816, 0.0023755203001201153, 0.00089072913397103548, 0.0034265513531863689, 0.00333036994561553, 0.0022282889112830162, 0.0016074792947620153, 0.0016894317232072353, 0.0021612509153783321, 0.0015743182739242911, 0.0039168721996247768, 0.0039707995019853115, 0.0043609999120235443, 0.0026804499793797731, 0.0037381448782980442, 0.0024944860488176346, 0.0015862700529396534, 0.0049443324096500874, 0.0029531107284128666, 0.0014493839116767049, 0.0028441427275538445, 0.0026114648208022118, 0.0027918247506022453, 0.0016797756543383002, 0.0030349988956004381, 0.0026947460137307644, 0.0012813935754820704, 0.0011850249720737338, 0.00404695188626647, 0.0029370991978794336, 0.0024853495415300131, 0.0021070663351565599, 0.003510800888761878, 0.0025071639101952314, 0.0027176227886229753, 0.003419490298256278, 0.002698349766433239, 0.0039556813426315784, 0.0037434354890137911, 0.0022907119709998369, 0.0029055213090032339, 0.0031054043211042881, 0.0026079828385263681, 0.0029246797785162926, 0.002049365546554327, 0.00088825001148506999, 0.0019769647624343634, 0.0013242606073617935, 0.002976119751110673, 0.0040388666093349457, 0.0034776257816702127, 0.0040695690549910069, 0.0038016214966773987, 0.0013183915289118886, 0.0024339854717254639, 0.0031022739131003618, 0.0018570764223113656, 0.0019113552989438176, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -3655, 20087, -33503, 3019, 22007, -23086, -60262, -14797, -6284, 11149, -25440, -23965, 9373, -18717, -6283, -5008, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 9.7812975582201034e-05, 9.093448898056522e-05, 8.5005223809275776e-05, 9.9790740932803601e-05, 6.4549865783192217e-05, 9.1004360001534224e-05, 6.5969354182016104e-05, 0.0001119258813560009, 7.2175818786490709e-05, 5.3528001444647089e-05, 9.7810712759383023e-05, 7.9388948506675661e-05, 7.0135167334228754e-05, 6.4459505665581673e-05, 0.0001095197512768209, 8.0983525549527258e-05, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 31,34,23,-44,69,63,-51,48,-11,118,-7,46,-34,36,-7,45,19,71,35,-52,-77,75,-13,45,56,32,31,48,-56,-42,-11,76,-29,7,-75,47,53,-127,-42,9,14,-35,63,-8,-18,-61,-63,-21, 
  /* [1][0][][] */ -44,-3,-84,-54,7,94,-62,24,-10,-32,-61,33,59,-10,-24,-20,-45,-44,1,32,-86,53,-123,-43,-51,-48,52,68,-31,-35,37,-49,10,-65,-45,60,20,-72,127,-35,-27,27,-46,-25,46,50,29,17, 
  /* [2][0][][] */ -3,14,67,-44,-9,-73,15,15,108,72,-59,10,111,-40,127,71,-72,-14,-36,29,75,-71,-24,-91,21,-27,45,-72,31,41,-32,2,42,-28,65,50,-76,15,-6,-18,40,14,74,-14,10,-97,106,-46, 
  /* [3][0][][] */ 43,-1,-20,-28,33,98,26,-18,47,-53,17,-19,-47,0,16,48,-38,-61,42,-119,-14,5,-26,-25,-33,93,127,52,-11,-46,18,30,66,-31,82,32,-35,-64,1,42,22,5,-14,4,32,13,-17,-17, 
  /* [4][0][][] */ 113,-9,4,-60,106,76,46,22,81,-28,-119,26,46,-16,23,-7,-108,-124,-39,-110,-33,29,-30,-30,-76,127,-97,122,-74,-64,27,76,49,-52,19,-22,-10,16,-39,36,-41,-13,2,64,-63,98,-24,-45, 
  /* [5][0][][] */ 6,0,-56,9,-20,61,12,-27,56,51,35,92,58,-30,29,-9,-33,127,-11,38,10,-3,-73,-22,33,-8,-73,-33,-9,35,13,-18,-49,0,32,16,-37,10,-78,-2,81,-27,20,50,-9,9,-36,37, 
  /* [6][0][][] */ 46,21,2,77,9,-12,101,-46,12,63,127,84,31,54,-50,60,47,-35,-79,69,56,-62,-31,64,-69,98,92,5,97,37,-27,8,101,-54,-100,-2,81,28,13,12,25,70,61,-34,56,117,33,-9, 
  /* [7][0][][] */ -102,-14,-19,36,-68,-65,35,37,86,109,-61,-67,-97,16,-16,-4,-75,105,-2,111,-56,49,26,27,-10,-83,-29,-92,30,38,-7,1,-9,1,1,-15,4,-47,127,20,16,31,32,-8,66,61,-37,6, 
  /* [8][0][][] */ -9,-86,37,-66,45,-52,57,-47,-35,-110,34,17,-30,-2,18,17,-13,9,-34,103,0,33,-30,26,50,-17,-60,-45,-127,-10,-40,-113,-1,-55,10,79,1,38,94,8,6,4,57,108,-19,-72,-32,78, 
  /* [9][0][][] */ 16,-46,34,-70,52,72,-28,55,28,-37,-45,-27,14,-39,125,-7,-4,-119,28,38,-77,49,67,-31,-16,-71,-15,71,49,65,-51,-16,-40,35,1,127,-34,-51,-65,-16,-18,-11,45,105,52,75,-76,9, 
  /* [10][0][][] */ -14,10,-21,-2,26,20,-63,-46,42,38,71,-3,-39,-13,42,-56,-66,127,7,48,9,-19,13,30,-52,42,4,98,43,12,-32,-8,63,16,-1,19,-5,-51,-34,17,-89,7,21,-27,11,52,30,30, 
  /* [11][0][][] */ -42,51,-14,46,25,64,1,3,11,11,-127,-67,83,13,-17,-55,8,37,-40,-50,-17,-3,107,-3,51,20,-15,28,2,36,0,43,33,-5,-60,1,53,93,118,21,43,-37,63,6,-52,-20,101,12, 
  /* [12][0][][] */ -64,1,25,21,-66,-49,1,4,-48,-39,-120,11,73,-94,14,23,52,110,93,-127,-21,30,-37,-75,-16,-19,36,-25,18,11,-18,71,53,88,48,-33,-45,-23,44,-4,-43,27,53,-3,32,-2,-32,-50, 
  /* [13][0][][] */ -46,-116,-31,-92,21,11,65,6,-104,23,105,-61,51,35,127,17,113,25,-13,-101,65,-66,114,-11,-64,16,-22,11,-46,-104,-111,15,54,-36,-79,60,32,-56,74,-57,1,39,68,48,59,-29,94,-58, 
  /* [14][0][][] */ 62,14,-44,-6,-40,18,-76,-25,-19,53,50,46,-2,-53,25,-36,50,-104,18,9,75,-50,32,-4,-2,124,-83,-4,-63,-35,-84,-1,127,49,76,-16,-76,12,-33,61,-5,-53,109,-14,-48,-51,-56,51, 
  /* [15][0][][] */ -62,13,38,28,87,-5,1,25,19,72,-11,53,51,-17,-39,-20,11,45,-4,-40,29,-39,-48,-55,43,-63,-28,63,-24,7,16,8,-57,5,127,-3,-87,23,54,-19,-53,-8,14,-8,-39,-26,-8,7, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0065917624160647392, 0.0061282110400497913, 0.0057286289520561695, 0.0067250467836856842, 0.0043501118198037148, 0.0061329193413257599, 0.0044457730837166309, 0.007542851846665144, 0.0048640361055731773, 0.0036073317751288414, 0.0065916096791625023, 0.005350139457732439, 0.0047265132889151573, 0.0043440223671495914, 0.007380699273198843, 0.0054576005786657333, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 11639, -365, 13623, -8, 16052, -2162, 34657, 132, 9585, 29620, 3126, 26934, -502, 8412, 34349, 26701, 939, -515, 6734, 45408, 421, 16892, 2005, 14089, 13207, 27945, -91, -26, -2837, 13894, 19364, 568, 1457, -1306, 2653, 14198, 7929, 26179, 2847, 13743, 23432, 503, 1479, 16427, 374, 3051, 38258, 29511, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 9.9600329122040421e-05, 9.7362040833104402e-05, 8.607972995378077e-05, 0.00014903626288287342, 8.8897395471576601e-05, 7.8243421739898622e-05, 5.2160266932332888e-05, 0.00022018214804120362, 0.00010307742923032492, 7.1972877776715904e-05, 6.191376451170072e-05, 7.4986652180086821e-05, 7.6320087828207761e-05, 0.00013537847553379834, 5.2281375246820971e-05, 7.0275622420012951e-05, 9.7484742582309991e-05, 8.0206576967611909e-05, 0.0001397905289195478, 4.5027951273368672e-05, 8.799683564575389e-05, 7.0460962888319045e-05, 7.4978182965423912e-05, 0.00013249926269054413, 7.2505150455981493e-05, 8.4931038145441562e-05, 7.1608126745559275e-05, 4.7192635975079611e-05, 0.00024510346702300012, 8.209128282032907e-05, 7.1444083005189896e-05, 0.00018189007823821157, 9.7878015367314219e-05, 0.00014271697727963328, 8.3445309428498149e-05, 8.1850070273503661e-05, 0.00011044993152609095, 7.6367934525478631e-05, 9.6859599580056965e-05, 0.00012083766341675073, 5.9030593547504395e-05, 0.00014223784091882408, 0.00020614860113710165, 7.9618570453021675e-05, 0.0001460447529098019, 5.3850733820581809e-05, 5.4941534472163767e-05, 4.5364598918240517e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -81,99,-127,93,-109,76,-73,36,-71,-60,64,-44,93,-73,-30,-77,91,71,78,-118,66,-76,70,-63,-92,-40,75,99,-95,-27,-74,127,85,-90,76,-116,-48,-83,75,-36,-11,-87,102,-65,126,80,-90,-41, -79,127,-45,96,-81,127,-65,55,-105,-82,102,-67,94,-104,-51,-122,116,102,123,-127,94,-127,107,-111,-84,-79,91,127,51,-43,-87,53,102,-127,98,-127,-80,-100,109,-47,-113,121,121,-127,-47,95,-102,-88, -20,50,1,12,-48,71,-39,66,-24,-30,56,-51,47,-21,-8,-49,34,45,50,-20,22,-70,68,-40,-40,-46,36,46,127,-5,-61,81,35,-112,38,-24,-47,-51,28,-51,-127,-39,45,-81,-63,40,-33,-117, 
  /* [0][1][][] */ -106,98,-77,127,-73,127,-123,119,-109,-93,75,-93,104,-117,-82,-127,95,79,-76,-92,91,-91,110,-77,-69,-57,72,93,-125,-76,-120,32,127,39,98,-105,-83,-86,101,-48,-76,-127,127,-121,127,60,-127,-78, -127,125,-64,106,-127,105,-127,127,-127,-127,127,-127,127,-127,-127,-126,127,127,-84,-106,127,-96,127,-127,-127,-127,127,86,25,-127,-127,76,123,73,127,-100,-127,-127,127,-127,-101,127,105,-105,-61,127,-111,-127, -83,108,-44,23,-89,11,-60,27,-55,-38,70,-80,48,-36,-68,-3,52,64,-71,-15,40,-69,64,-48,-118,-27,39,59,109,-42,-46,-3,65,8,55,-36,-40,-43,53,-67,-57,-58,17,-95,-86,79,-8,-125, 
  /* [0][2][][] */ -20,45,23,62,-7,26,-35,55,-50,-23,30,-51,37,-24,-71,-63,52,18,-99,3,23,-7,62,-3,-21,-33,21,-2,-95,-63,-44,-20,39,79,34,-44,-18,-53,9,-16,-74,-57,41,-53,72,28,-37,-30, -45,44,-45,65,-55,17,-47,-5,-63,-42,51,-61,57,-41,-98,-48,58,33,-127,-7,26,-44,71,-31,-54,-35,34,13,-10,-89,-54,62,37,106,40,-26,-29,-58,25,-38,-40,75,5,-80,-38,68,-45,-111, -19,20,-57,4,-61,-25,-15,45,-26,8,48,-47,30,-7,-48,27,32,8,-98,21,23,-18,38,-3,-58,-19,7,-7,62,-17,-6,-98,8,59,21,1,12,-21,1,-33,4,-2,13,-63,-43,51,5,-81, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0042330138385295868, 0.0041378866881132126, 0.0036583885084837675, 0.0063340412452816963, 0.0037781393621116877, 0.0033253452274948359, 0.002216811291873455, 0.0093577411025762558, 0.0043807905167341232, 0.0030588472727686167, 0.0026313350535929203, 0.0031869325321167707, 0.0032436037436127663, 0.0057535851374268532, 0.0022219584789127111, 0.0029867140110582113, 0.004143101628869772, 0.0034087793901562691, 0.0059410976245999336, 0.0019136879127472639, 0.0037398654967546463, 0.0029945909045636654, 0.0031865725759416819, 0.0056312186643481255, 0.003081468865275383, 0.0036095690447837114, 0.0030433451756834984, 0.0020056869834661484, 0.010416897013783455, 0.0034888794180005789, 0.0030363735277205706, 0.0077303284779191017, 0.0041598156094551086, 0.006065471563488245, 0.0035464256070554256, 0.003478627884760499, 0.004694121889770031, 0.0032456372864544392, 0.0041165328584611416, 0.0051356004551053047, 0.0025088002439588308, 0.0060451081953942776, 0.008761315606534481, 0.0033837892115116119, 0.0062069017440080643, 0.0022886560764163733, 0.0023350152187049389, 0.001927995472215116, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 3291, -2214, 1627, -3467, 6518, -786, 6677, -4317, 2174, 1587, 2338, 7342, 333, -915, 1461, 7655, -2938, 4637, 10321, 1197, -1891, 4017, -1886, 6293, 3316, 3898, 2311, -1465, 10925, -220, 4189, -3952, -1697, 5078, -1617, 3418, 3007, 2225, 228, 7458, 2243, 13249, -8200, 1989, 9883, -208, 4377, 3966, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00012260599760338664, 0.00017208854842465371, 0.00015235942555591464, 0.00014456514327321202, 0.00012008581688860431, 0.00014863994147162884, 0.00011681623436743394, 0.00011671730317175388, 0.00014234274567570537, 0.00014922693662811071, 0.00014532713976223022, 0.00010680142440833151, 0.00025699828984215856, 0.00020164191664662212, 0.00013758354180026799, 0.00010365535854361951, 0.00016265611338894814, 0.00016244745347648859, 9.1528883785940707e-05, 0.00018313692999072373, 0.00014896359061822295, 0.00013074013986624777, 0.00011524040746735409, 0.00013038318138569593, 0.00011984091543126851, 0.00011220065061934292, 0.00015693480963818729, 0.00017495085194241256, 8.2768179709091783e-05, 0.00016145041445270181, 0.00011252676631556824, 9.2045120254624635e-05, 0.00011205300688743591, 0.00014725410437677056, 0.00015891651855781674, 0.00013749736535828561, 0.00015463076124433428, 0.00013792491517961025, 0.00012462322774808854, 0.0001097990243579261, 0.00019587205315474421, 6.2188759329728782e-05, 7.3640607297420502e-05, 0.00018889337661676109, 8.1452824815642089e-05, 0.00016744724416639656, 0.00013608073641080409, 0.00014097876555752009, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 82,38,127,-31,72,96,-89,-50, 
  /* [1][0][][] */ 14,-80,-127,7,48,28,25,9, 
  /* [2][0][][] */ -127,5,-54,-39,55,33,-88,-44, 
  /* [3][0][][] */ 28,74,127,-63,1,-89,-16,-6, 
  /* [4][0][][] */ -127,13,-48,-27,45,19,-41,-68, 
  /* [5][0][][] */ -86,17,-62,-11,-1,28,-72,-127, 
  /* [6][0][][] */ -33,-127,-103,29,80,8,4,47, 
  /* [7][0][][] */ -51,-127,-80,-78,-70,-55,12,73, 
  /* [8][0][][] */ 86,53,-22,9,121,-83,-127,2, 
  /* [9][0][][] */ -41,45,-42,78,-64,-33,127,-34, 
  /* [10][0][][] */ -32,127,35,53,112,-20,-18,63, 
  /* [11][0][][] */ -90,-36,-11,-1,-75,114,127,-4, 
  /* [12][0][][] */ 61,32,-127,36,1,-26,-56,-18, 
  /* [13][0][][] */ 65,-20,-50,8,4,-127,-22,-26, 
  /* [14][0][][] */ -4,-70,89,26,127,-118,-82,25, 
  /* [15][0][][] */ -37,-33,7,127,72,73,-89,41, 
  /* [16][0][][] */ 95,33,-37,26,62,-91,-127,-17, 
  /* [17][0][][] */ 59,127,53,73,51,56,15,-75, 
  /* [18][0][][] */ 30,-17,-4,-1,127,6,28,-4, 
  /* [19][0][][] */ 19,127,24,17,-111,12,16,-19, 
  /* [20][0][][] */ -50,27,58,-127,34,39,-28,125, 
  /* [21][0][][] */ -37,83,42,-118,47,48,-12,127, 
  /* [22][0][][] */ -58,-65,-84,17,-127,104,112,-36, 
  /* [23][0][][] */ 104,32,-127,22,5,-47,-57,-27, 
  /* [24][0][][] */ -67,40,22,-6,-10,97,-127,116, 
  /* [25][0][][] */ -101,-65,-127,13,-69,-83,77,96, 
  /* [26][0][][] */ 48,-16,-28,-39,102,-8,127,-38, 
  /* [27][0][][] */ 127,-69,25,83,-2,33,-6,91, 
  /* [28][0][][] */ 60,43,38,1,127,-66,72,-48, 
  /* [29][0][][] */ -8,-26,-40,-45,-83,2,127,-25, 
  /* [30][0][][] */ 58,-125,-43,-65,-127,1,16,-64, 
  /* [31][0][][] */ 9,30,-14,-13,-127,4,-36,-14, 
  /* [32][0][][] */ 49,-49,-47,67,-13,-77,113,-127, 
  /* [33][0][][] */ 42,127,44,45,48,-10,-17,-28, 
  /* [34][0][][] */ -126,-24,127,4,-16,115,98,15, 
  /* [35][0][][] */ -39,88,127,-8,-64,-78,-54,39, 
  /* [36][0][][] */ -92,3,108,-25,-30,127,90,28, 
  /* [37][0][][] */ -5,-98,-21,-127,-59,-92,90,52, 
  /* [38][0][][] */ 57,-18,90,-51,60,55,-127,0, 
  /* [39][0][][] */ -1,85,-127,-47,-33,10,20,72, 
  /* [40][0][][] */ 59,-47,27,24,5,6,7,127, 
  /* [41][0][][] */ -35,108,127,-21,12,71,-98,51, 
  /* [42][0][][] */ 87,-126,-127,-18,-114,20,23,-120, 
  /* [43][0][][] */ -5,-70,21,-52,127,-44,9,42, 
  /* [44][0][][] */ -11,109,127,5,-10,64,-77,-1, 
  /* [45][0][][] */ -38,41,21,73,-127,62,-121,27, 
  /* [46][0][][] */ -58,-47,49,34,-127,-109,-27,-4, 
  /* [47][0][][] */ -35,68,53,-115,-127,51,-24,64, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0022241307888180017, 0.0031217678915709257, 0.0027638720348477364, 0.00262248027138412, 0.0021784135606139898, 0.0026963988784700632, 0.0021191018167883158, 0.0021173071581870317, 0.0025821649469435215, 0.0027070473879575729, 0.0026363031938672066, 0.0019374284893274307, 0.0046620708890259266, 0.0036578800063580275, 0.0024958306457847357, 0.0018803572747856379, 0.0029506590217351913, 0.0029468736611306667, 0.0016603772528469563, 0.0033221906051039696, 0.0027022701688110828, 0.0023716881405562162, 0.0020905155688524246, 0.0023652126546949148, 0.0021739709191024303, 0.0020353728905320168, 0.0028468717355281115, 0.0031736914534121752, 0.0015014540404081345, 0.0029287869110703468, 0.0020412888843566179, 0.0016697420505806804, 0.0020326946396380663, 0.0026712592225521803, 0.0028828210197389126, 0.0024942674208432436, 0.0028050751425325871, 0.0025020232424139977, 0.0022607243154197931, 0.0019918063189834356, 0.003553211921826005, 0.0011281336192041636, 0.0013358754804357886, 0.0034266153816133738, 0.0014775928575545549, 0.0030375723727047443, 0.0024685689713805914, 0.0025574215687811375, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 1496, -527, 22455, -5114, 4363, -15084, 2434, -13859, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 7.7861659519840032e-05, 0.00010323857713956386, 0.00013529861462302506, 0.00010779224248835817, 0.0001368492521578446, 0.00013613894407171756, 8.8963184680324048e-05, 8.5350606241263449e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -28,-37,-14,-51,13,-4,76,95,-105,-79,-46,15,-54,-1,-69,33,-78,7,25,127,67,-15,22,85,70,74,17,-7,-87,-54,-79,-64,-44,89,34,-47,31,-20,102,7,12,-7,-2,-107,41,-24,-24,-69, 
  /* [1][0][][] */ -4,55,-20,-21,-65,78,-21,-59,-49,88,-11,28,57,53,-43,-3,-30,-127,94,-52,125,15,-56,16,75,9,-86,56,39,-3,67,25,-29,-7,-5,-2,11,123,-29,-17,71,55,-5,25,122,23,-35,75, 
  /* [2][0][][] */ -17,-36,119,11,94,-37,-12,15,-41,6,-4,52,17,-38,-40,-127,-55,-105,-16,13,-100,31,-32,-42,-44,25,-5,-57,-38,15,-37,-20,4,3,20,6,33,-22,-52,16,28,-27,29,-39,-35,-39,-62,-43, 
  /* [3][0][][] */ 64,5,61,6,30,-27,48,80,-67,-12,57,-12,-64,56,-23,60,60,40,-32,42,-99,-59,117,-15,15,14,-50,-39,-42,69,127,-79,-6,-113,-29,57,3,-67,-26,77,-74,-54,71,8,-97,-74,51,3, 
  /* [4][0][][] */ 26,-19,69,-22,14,-2,-2,-10,-63,1,-19,13,41,-70,45,-95,40,37,-1,-26,5,36,25,2,7,8,50,-22,27,26,-127,-21,-27,-12,-4,19,47,4,29,9,-42,-6,-68,35,-12,-89,2,22, 
  /* [5][0][][] */ 30,-44,62,31,22,16,19,3,-76,-5,-37,35,26,5,14,-46,85,77,-15,-23,82,-54,127,-96,-20,51,11,45,13,20,-29,-53,-9,-37,-42,-1,54,27,70,2,-71,37,31,26,48,-9,84,-10, 
  /* [6][0][][] */ -46,47,-127,74,47,11,40,20,-22,-16,66,-69,-102,-26,-38,23,-113,30,-18,93,32,56,-88,-76,-14,-10,28,78,-35,-41,-52,19,36,65,-34,-38,-7,-1,76,-5,82,53,-116,-67,-36,110,-54,-45, 
  /* [7][0][][] */ 30,61,-88,10,15,49,127,66,41,63,-92,-13,-34,-8,-54,-33,26,39,122,96,90,-4,120,31,96,85,-41,98,-69,22,2,-67,5,-70,-25,30,-6,107,-68,82,-48,37,4,-74,73,-25,42,-29, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0033091204240918159, 0.0043876394629478455, 0.0057501909323036671, 0.0045811701565980911, 0.0058160931803286076, 0.0057859048247337341, 0.003780935425311327, 0.0036274006124585867, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -131, 9539, -266, -674, 1836, -1422, 3761, -38, -3185, -281, -7660, -227, -575, -663, -2328, 4254, 7864, 3100, -95, -4195, -7032, -160, 20940, -5324, -1986, -222, 4453, -6657, -385, -572, -8011, 8995, 3768, 221, 2426, 504, -13, -466, 9968, -905, 6536, -1611, 2065, 5107, -1963, 11123, -88, 2416, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00029914741753600538, 0.00018037873087450862, 0.00082316208863630891, 0.00023343543580267578, 0.00024778008810244501, 0.00028241946711204946, 0.00023482755932491273, 0.00033673580037429929, 0.00011114182416349649, 0.00033981652813963592, 0.00019152781169395894, 0.001228475128300488, 0.00050120259402319789, 0.00071333983214572072, 0.00036160441231913865, 0.00062658515525981784, 0.00014841920346952975, 5.7510704209562391e-05, 0.00027991784736514091, 0.00029685691697522998, 0.00025124955573119223, 0.00026159101980738342, 7.4538504122756422e-05, 0.00047137207002379, 0.00020382925868034363, 0.00043308947351761162, 0.00047985670971684158, 0.0001941489172168076, 0.00027805747231468558, 0.00044963377877138555, 0.00013968998973723501, 0.00014252480468712747, 0.00014717575686518103, 0.00018120686581823975, 0.00015750384773127735, 0.00036639452446252108, 0.001997276209294796, 0.0004304483300074935, 0.00015351864567492157, 0.00017391456640325487, 0.00016218048403970897, 0.0001520892110420391, 0.00034975956077687442, 0.00021416532399598509, 0.00037027677171863616, 8.2411381299607456e-05, 6.8056418967898935e-05, 0.00022985955001786351, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 15,-28,7,6,-29,-91,-50,53,-31,7,15,14,46,-1,-14,9,98,2,18,13,-4,-31,-91,24,0,-21,4,-20,-53,82,-2,-75,58,-18,-42,-70,-14,-35,0,-7,-20,26,21,-12,-2,62,127,-36, -127,-70,-24,127,-80,66,-107,127,20,24,21,3,51,24,7,-39,-25,50,26,19,18,123,0,127,127,-38,-30,50,66,-115,3,-86,77,-17,-30,-127,22,1,-60,-45,-127,-14,-91,-127,41,51,51,85, -21,-16,9,9,-36,35,28,35,1,-20,-13,10,-20,4,5,8,-56,58,-67,-18,4,-40,127,19,-61,-4,15,16,13,42,21,-10,4,-24,-24,67,8,-1,30,83,26,-25,40,-39,1,32,-18,-17, 
  /* [0][1][][] */ -5,-32,-30,0,25,-95,123,-77,-10,19,44,33,127,20,-4,-30,-11,-51,24,52,53,-63,38,18,-59,127,-77,-18,127,-86,51,-127,-42,-5,-67,1,18,-55,-43,-7,120,127,22,-102,-49,-58,-8,54, 85,-127,127,3,127,75,-78,-59,32,127,127,-127,-93,127,127,127,127,126,121,127,127,127,-8,10,117,-105,-127,101,22,127,127,9,-127,127,127,115,-127,127,-127,-127,48,25,-127,-16,127,-127,-13,54, 19,20,-42,-3,-63,127,-127,77,90,-56,8,73,-35,16,21,-65,24,28,-127,7,30,-117,-55,-1,68,-18,-28,127,-76,-32,28,-49,-14,24,97,-25,43,-9,11,-90,117,-6,45,47,-42,86,89,-84, 
  /* [0][2][][] */ 4,21,4,-30,-8,-47,-22,-11,20,8,14,7,-8,-12,-8,-4,-36,34,9,-41,-5,-8,81,-7,-114,-1,37,-17,9,4,10,7,11,-22,-49,18,6,-10,26,50,-39,-9,20,25,-8,9,-22,-12, 34,-22,-36,-33,21,34,111,-117,127,-18,-11,12,-69,-23,-27,-76,-15,127,9,18,7,46,-38,-28,-86,57,68,8,-98,16,-19,-14,-5,-10,-25,-10,66,-22,7,122,-118,-15,-4,76,40,46,-4,-127, -9,17,2,-20,-24,6,-16,-69,-12,-9,-17,10,25,-13,-10,9,45,61,-25,-29,-2,-10,-66,-13,17,-29,17,2,-19,5,1,2,47,-30,-14,-54,-6,-7,41,9,-8,-22,17,26,-5,17,42,-62, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.012713764794170856, 0.0076660956256091595, 0.034984387457370758, 0.0099210059270262718, 0.010530653409659863, 0.012002826668322086, 0.0099801709875464439, 0.014311271719634533, 0.0047235274687409401, 0.01444220170378685, 0.0081399315968155861, 0.052210193127393723, 0.021301109343767166, 0.030316941440105438, 0.015368187800049782, 0.026629868894815445, 0.0063078161329030991, 0.0024442048743367195, 0.011896508745849133, 0.012616419233381748, 0.010678105987608433, 0.011117618530988693, 0.0031678862869739532, 0.02003331296145916, 0.0086627434939146042, 0.018406301736831665, 0.020393909886479378, 0.0082513289526104927, 0.011817442253232002, 0.019109435379505157, 0.0059368242509663105, 0.0060573038645088673, 0.0062549696303904057, 0.0077012917026877403, 0.0066939131356775761, 0.015571767464280128, 0.084884233772754669, 0.01829405315220356, 0.0065245423465967178, 0.0073913689702749252, 0.0068926704116165638, 0.0064637912437319756, 0.014864780940115452, 0.0091020260006189346, 0.015736762434244156, 0.0035024837125092745, 0.0028923978097736835, 0.0097690308466553688, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 7254, 9124, 26073, 1689, 4276, -4492, 10419, 21936, 6736, -2363, 8706, -3752, 37878, -4207, 4265, 22110, -1002, 4317, 99, 5437, 8777, 7693, 719, 37020, 11626, 6435, 18944, 3257, 10665, 7645, 1338, 2287, 2020, 3027, -954, 948, -5159, -740, 5794, 5315, 8400, 5303, 9444, 8565, 7119, 5139, 3161, 13795, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 9.2471054813358933e-05, 9.4693328719586134e-05, 3.8406320527428761e-05, 0.00014080171240493655, 0.00013149082951713353, 0.00010359929001424462, 8.0486897786613554e-05, 4.314432226237841e-05, 7.7330856584012508e-05, 0.00010542426025494933, 9.867976768873632e-05, 0.00012048226199112833, 2.6669513317756355e-05, 0.00011579969577724114, 0.0001194912038045004, 4.4703334424411878e-05, 0.00015494365652557462, 0.00011332739813951775, 0.00012247344420757145, 0.00011744882067432627, 8.6712017946410924e-05, 0.00010381749598309398, 0.00019092406728304923, 2.8347769330139272e-05, 7.474710582755506e-05, 8.8418433733750135e-05, 5.0815840950235724e-05, 0.00012656235776375979, 7.9150035162456334e-05, 9.4123388407751918e-05, 0.00025259883841499686, 0.00020959158428013325, 0.00012737179349642247, 0.00011563255975488573, 0.00012870431237388402, 0.00013846611545886844, 0.00010395385470474139, 0.00013548045535571873, 0.00010202837438555434, 9.5503484772052616e-05, 9.524455526843667e-05, 0.00010612511687213555, 9.2249756562523544e-05, 9.2836569820065051e-05, 9.4798000645823777e-05, 0.00013035096344538033, 0.00018978342995978892, 6.4547879446763545e-05, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 84,127,-76,-116,28,81,30,76, 
  /* [1][0][][] */ 72,-79,44,-127,-65,87,-78,-57, 
  /* [2][0][][] */ -38,127,120,43,104,-7,38,21, 
  /* [3][0][][] */ 99,49,-75,52,4,-84,-127,-40, 
  /* [4][0][][] */ -42,30,23,-51,-24,108,127,33, 
  /* [5][0][][] */ 24,92,-127,-75,63,84,27,-30, 
  /* [6][0][][] */ -28,127,50,59,75,15,19,-108, 
  /* [7][0][][] */ 127,-25,-13,29,15,-5,77,32, 
  /* [8][0][][] */ 45,119,65,95,116,94,127,-112, 
  /* [9][0][][] */ 35,127,-115,-113,-4,87,-13,90, 
  /* [10][0][][] */ -57,-31,25,-49,-5,-20,-36,127, 
  /* [11][0][][] */ 8,-127,-122,-28,17,-4,32,1, 
  /* [12][0][][] */ -46,-125,-110,-18,-127,43,-59,45, 
  /* [13][0][][] */ -7,11,-95,105,-127,-30,6,-23, 
  /* [14][0][][] */ -57,-51,-127,-15,30,5,-3,-69, 
  /* [15][0][][] */ 30,-81,-127,18,-79,-36,-40,2, 
  /* [16][0][][] */ 127,-78,-10,56,-92,17,22,107, 
  /* [17][0][][] */ -27,99,127,-27,-53,0,-15,-31, 
  /* [18][0][][] */ -5,-127,68,79,-20,-76,56,-81, 
  /* [19][0][][] */ 127,-56,-51,33,-111,16,54,96, 
  /* [20][0][][] */ -25,-127,82,82,-17,-95,-4,-76, 
  /* [21][0][][] */ -6,-48,-20,-36,127,4,37,20, 
  /* [22][0][][] */ -127,30,-63,50,53,60,-85,-96, 
  /* [23][0][][] */ -88,-63,51,-13,-114,127,119,-46, 
  /* [24][0][][] */ -42,37,-8,-47,-47,105,127,-10, 
  /* [25][0][][] */ -69,-99,-127,-46,-74,4,-12,-40, 
  /* [26][0][][] */ -18,70,-13,127,-76,25,-59,9, 
  /* [27][0][][] */ 9,-119,39,72,7,-41,15,-127, 
  /* [28][0][][] */ 3,127,61,22,90,-20,8,-41, 
  /* [29][0][][] */ 92,26,-45,8,77,-127,-80,23, 
  /* [30][0][][] */ 17,-14,24,-127,11,-17,19,-27, 
  /* [31][0][][] */ 41,-46,4,53,-16,21,7,127, 
  /* [32][0][][] */ -87,-92,-2,-89,-81,127,58,86, 
  /* [33][0][][] */ -31,50,48,-27,50,127,-110,59, 
  /* [34][0][][] */ 22,127,-52,-43,29,53,-77,67, 
  /* [35][0][][] */ 8,-127,29,40,-18,-55,42,-68, 
  /* [36][0][][] */ -6,-27,-98,-2,-127,-68,-26,20, 
  /* [37][0][][] */ -69,-127,66,85,-52,-97,-22,-62, 
  /* [38][0][][] */ -84,26,66,-68,-127,-78,-54,95, 
  /* [39][0][][] */ 82,-127,112,54,3,-81,1,-95, 
  /* [40][0][][] */ -8,45,34,42,-127,-4,-50,30, 
  /* [41][0][][] */ 118,127,-67,-105,54,34,9,10, 
  /* [42][0][][] */ -3,-46,-21,8,127,22,56,12, 
  /* [43][0][][] */ 127,14,78,27,-81,-32,72,110, 
  /* [44][0][][] */ 60,41,-12,0,70,-106,-127,34, 
  /* [45][0][][] */ 45,19,34,23,80,-127,10,-70, 
  /* [46][0][][] */ 61,-27,-1,127,45,66,24,64, 
  /* [47][0][][] */ -71,-84,23,43,-36,1,127,-70, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0025154291652143002, 0.0025758803822100163, 0.0010447418317198753, 0.0038301362656056881, 0.0035768586676567793, 0.0028181432280689478, 0.0021894320379942656, 0.0011736266314983368, 0.0021035803947597742, 0.0028677866794168949, 0.0026843207888305187, 0.0032773995772004128, 0.000725473219063133, 0.0031500228215008974, 0.0032504405826330185, 0.0012160353362560272, 0.0042148302309215069, 0.0030827706214040518, 0.003331564599648118, 0.0031948830001056194, 0.0023587699979543686, 0.0028240790124982595, 0.0051935818046331406, 0.00077112572034820914, 0.0020332962740212679, 0.002405188512057066, 0.0013823098270222545, 0.0034427924547344446, 0.0021530662197619677, 0.0025603766553103924, 0.0068712797947227955, 0.0057013817131519318, 0.0034648112487047911, 0.0031454763375222683, 0.0035010587889701128, 0.0037666026037186384, 0.0028277882374823093, 0.003685385687276721, 0.0027754106558859348, 0.002597918501123786, 0.0025908749084919691, 0.0028868517838418484, 0.0025094093289226294, 0.0025253721978515387, 0.0025787276681512594, 0.0035458514466881752, 0.0051625538617372513, 0.0017558534163981676, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 8241, 15139, -4988, 6151, -487, 3881, -11162, -18924, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00022451157565228641, 0.00014108735194895416, 0.00015251846343744546, 0.00012879271525889635, 0.00018270040163770318, 0.00014963025751058012, 0.00022801803424954414, 0.00013567270070780069, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -44,-11,32,12,-27,-20,7,3,-41,-1,-70,-59,-20,-73,-4,-31,49,-47,36,39,-21,32,-44,16,-4,-44,65,-19,-4,-23,23,8,83,41,40,-127,17,0,-13,-36,5,-18,52,49,37,6,30,-1, 
  /* [1][0][][] */ 8,34,57,-17,-4,51,-54,-19,9,31,-20,-102,13,98,-16,47,-26,23,-16,-61,9,-82,-36,22,-72,-21,-7,-107,-18,-6,29,-65,45,69,-29,12,116,-26,11,50,-35,50,-77,-19,127,-12,-41,-18, 
  /* [2][0][][] */ 3,-25,-58,19,2,48,20,3,0,47,-6,20,67,-83,22,-62,30,-85,31,25,-25,47,-12,27,-18,51,-22,-67,23,8,14,-75,-45,-83,40,-21,98,25,-8,-56,-3,33,82,32,127,22,17,29, 
  /* [3][0][][] */ -8,30,-75,41,21,-40,-75,-94,19,-15,-43,3,12,24,43,74,-7,16,-41,24,1,-87,29,-56,-76,-7,127,-8,-37,9,-58,7,-8,-79,19,-6,-29,-33,-18,112,-49,-36,6,18,47,-2,-42,40, 
  /* [4][0][][] */ -21,-53,-8,10,37,-24,-12,-4,26,-37,60,-86,1,36,9,5,-17,-25,11,-19,-6,-54,-1,-19,18,-15,37,50,40,23,-15,24,-12,-4,7,-1,-75,88,37,-20,32,-17,-18,-19,-83,13,127,15, 
  /* [5][0][][] */ 51,-26,9,16,28,-40,29,-127,33,-24,-5,108,-79,71,25,-66,5,-92,20,-2,-31,59,-38,-53,-54,72,-21,0,-14,55,-43,-40,34,55,40,-13,-39,-8,-46,-46,21,-36,-47,-7,-30,56,93,20, 
  /* [6][0][][] */ 48,-17,17,-15,-41,-24,-31,19,-41,3,-39,127,-40,-40,-1,51,5,49,13,36,35,-74,-14,23,18,43,-63,10,8,-43,16,40,7,14,-18,-6,11,-6,-9,0,-14,-19,40,50,-6,-40,66,-20, 
  /* [7][0][][] */ -27,-5,-15,65,43,24,11,33,31,7,62,6,127,96,71,51,45,50,-6,5,14,-14,-89,-24,8,0,-28,67,39,-23,-32,-15,27,0,45,-84,-74,41,41,50,-27,28,92,124,-60,-15,-103,54, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0095417415723204613, 0.005996212363243103, 0.0064820344559848309, 0.0054736901074647903, 0.0077647669240832329, 0.0063592856749892235, 0.0096907662227749825, 0.0057660895399749279, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 12161, 4398, 4807, -418, 34, -150, 282, 38422, -446, -1039, 7835, 50996, 551, 1944, -196, 9422, -1089, 14013, 198, 11403, 11395, 917, 4806, -9235, 16047, 1918, 1760, 17268, 2540, 277, -8351, 14735, 2874, 2356, -761, 5672, -11446, 5946, -130, 19228, -1545, -334, 5292, 2624, 347, 160, 855, -728, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 7.080347859300673e-05, 9.9404795037116855e-05, 0.00015468997298739851, 0.00018088321667164564, 0.00084234203677624464, 0.00016770453657954931, 0.0001341273746220395, 6.9121371780056506e-05, 0.00012583888019435108, 8.6406012997031212e-05, 6.5339758293703198e-05, 6.5036467276513577e-05, 8.4047096606809646e-05, 6.5095824538730085e-05, 0.00022850891400594264, 0.00016479365876875818, 0.00010020568879554048, 0.00033388228621333838, 0.00011222818284295499, 9.155652514891699e-05, 0.00010291494982084259, 0.00026644431636668742, 0.00011638148134807125, 0.0001762907049851492, 7.7219709055498242e-05, 9.2094567662570626e-05, 6.5341686422470957e-05, 6.6704909841064364e-05, 0.00017598051636014134, 0.00088069034973159432, 0.00021590902179013938, 7.8234348620753735e-05, 9.997229790315032e-05, 0.00014765506784897298, 0.00020277719886507839, 5.9967183915432543e-05, 6.9168534537311643e-05, 6.3182043959386647e-05, 0.00011831510346382856, 6.7901935835834593e-05, 0.00010867078526644036, 0.00017034889606293291, 6.1721024394501001e-05, 7.9894445661921054e-05, 7.3321360105182976e-05, 0.00036117323907092214, 7.0220303314272314e-05, 0.00019893702119588852, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -61,-94,-28,-22,127,-57,44,-41,-94,-77,-15,-44,104,60,80,-127,51,-36,19,-56,-57,105,12,13,-21,57,51,-19,52,-84,16,-72,-84,-88,50,63,2,69,90,-108,-126,-19,57,58,69,-127,91,84, -97,-127,-76,45,-67,98,61,-50,-82,62,91,-89,127,114,127,-81,-98,-99,47,-56,-57,77,-91,124,-96,82,78,-127,65,-62,-8,-127,-20,-90,87,127,127,98,121,-86,-127,-73,65,79,96,95,95,80, 13,-73,-76,96,-32,-42,32,-19,89,41,63,-50,37,55,-29,-23,-88,-20,26,-50,-16,-44,-125,-19,-77,32,21,-84,14,51,127,-83,41,-5,-14,64,86,39,44,-31,-33,77,80,31,57,20,16,-123, 
  /* [0][1][][] */ -98,-116,-34,-63,-66,-79,75,-127,-126,-127,75,-91,99,71,-116,-64,127,-127,-46,-107,-88,127,-22,-4,-27,96,87,-65,-108,-92,-7,-66,-106,-127,-127,48,22,68,16,-114,84,-26,101,106,81,94,124,-127, -117,-124,-127,-98,-21,127,127,-126,127,92,127,-127,125,127,58,-83,64,-88,-127,-127,-127,114,-127,127,-127,127,127,-124,-127,127,-25,-119,-127,-110,60,125,119,127,-5,-127,126,-102,127,127,127,-11,127,123, -27,-45,-106,127,66,-64,34,-35,80,49,3,-49,26,61,95,-49,-15,19,-20,-78,-78,-39,-61,-33,-103,38,28,-83,-60,31,117,-113,-71,-6,69,87,58,49,-28,-23,42,127,99,27,46,-53,21,21, 
  /* [0][2][][] */ -120,-20,4,36,-39,-24,0,-56,53,-33,17,-52,15,29,-20,1,-96,-32,111,-55,-43,-7,-110,-19,-26,45,50,-30,14,51,-19,-20,-11,-88,-37,20,11,22,-68,-56,22,-7,54,30,48,43,3,-57, -127,-32,-54,-66,80,32,25,-67,114,45,-34,-73,11,43,-124,-47,27,5,48,-77,-66,-26,-85,72,-53,50,51,-55,25,-5,-42,-56,-40,-32,-60,38,36,28,-127,-72,23,-44,72,58,51,-110,11,13, -54,-7,-55,-15,-32,-29,-6,-40,-86,32,-21,-26,5,14,43,-7,30,43,-8,-53,-55,-81,-46,-48,-58,0,6,-43,-7,-78,38,-47,-54,4,18,39,23,23,-77,-32,-17,40,21,16,36,-12,-4,39, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.003009147709235549, 0.0042247036471962929, 0.0065743238665163517, 0.007687536533921957, 0.035799536854028702, 0.0071274423971772194, 0.0057004131376743317, 0.0029376582242548466, 0.0053481520153582096, 0.0036722554359585047, 0.0027769396547228098, 0.0027640496846288443, 0.0035720015875995159, 0.0027665724046528339, 0.0097116287797689438, 0.0070037301629781723, 0.0042587416246533394, 0.014189996756613255, 0.0047696977853775024, 0.0038911520969122648, 0.0043738852255046368, 0.011323883198201656, 0.004946212749928236, 0.0074923546053469181, 0.0032818375620990992, 0.0039140190929174423, 0.002777021611109376, 0.0028349587228149176, 0.007479171734303236, 0.037429340183734894, 0.0091761332005262375, 0.0033249598927795887, 0.0042488225735723972, 0.00627534044906497, 0.0086180306971073151, 0.00254860520362854, 0.0029396626632660627, 0.002685236744582653, 0.0050283917225897312, 0.0028858322184532881, 0.0046185082755982876, 0.007239827886223793, 0.0026231433730572462, 0.0033955138642340899, 0.0031161578372120857, 0.015349862165749073, 0.0029843628872185946, 0.0084548229351639748, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 1776, -1121, -1053, 3078, 23155, 3190, -1251, 10085, 3330, 2200, 73, 4956, 1490, 629, -1957, 929, 6727, 22686, 6847, -1156, 2408, -3470, -245, 4840, -905, -1822, 3200, 58, 6836, 20489, 6267, -121, 762, -164, 3939, -50, 1584, -322, 2976, 2045, 2782, 3334, 179, -333, 1167, 3727, 2785, -173, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00025786145124584436, 0.00020923890406265855, 0.00014890689635649323, 0.00015172635903581977, 4.2024486901937053e-05, 0.00018930873193312436, 0.0002627272333484143, 9.1563786554615945e-05, 0.00014335603918880224, 0.00029210062348283827, 0.00015080359298735857, 0.00016670812328811735, 0.00012137524026911706, 0.00019672268535941839, 0.00014931069745216519, 0.00015155223081819713, 0.00011709867976605892, 4.1768733353819698e-05, 0.00011244100460316986, 0.0001845706719905138, 0.00017723080236464739, 8.7254906247835606e-05, 0.00023660928127355874, 0.00014806723629590124, 0.00018371427722740918, 0.00032776192529127002, 0.00017772556748241186, 0.00028228486189618707, 0.00012112168769817799, 4.651494964491576e-05, 0.00012584606884047389, 0.00041902260272763669, 0.00019889646500814706, 0.0002171219966839999, 0.00017641224258113652, 0.00016241492994595319, 0.00012881855946034193, 0.0003384504234418273, 0.00016954516468103975, 0.00027731593581847847, 0.00018547945364844054, 0.00018733803881332278, 0.00017362841754220426, 0.00024228906841017306, 0.00021059562277514488, 0.00012942393368575722, 0.00013782492897007614, 0.00016316139954142272, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -37,36,7,-12,-66,-38,-127,22, 
  /* [1][0][][] */ 73,-70,-44,-44,127,-95,95,19, 
  /* [2][0][][] */ -120,123,-58,-127,48,-23,-18,52, 
  /* [3][0][][] */ 50,20,86,-10,98,100,127,-24, 
  /* [4][0][][] */ -54,-127,57,23,-46,-115,19,-53, 
  /* [5][0][][] */ 127,-15,80,54,-54,-4,-12,-27, 
  /* [6][0][][] */ 17,28,127,-21,37,-29,-37,35, 
  /* [7][0][][] */ 22,1,-127,-24,-46,94,106,-68, 
  /* [8][0][][] */ 6,110,-25,1,70,127,47,51, 
  /* [9][0][][] */ 5,127,-34,99,33,-114,21,89, 
  /* [10][0][][] */ 19,-127,1,-18,-76,-127,-59,-87, 
  /* [11][0][][] */ -127,-70,105,55,1,-54,95,72, 
  /* [12][0][][] */ -43,52,-127,99,48,-55,-75,115, 
  /* [13][0][][] */ 93,-127,100,88,14,33,27,-52, 
  /* [14][0][][] */ -40,90,-57,-120,-29,-127,-13,-43, 
  /* [15][0][][] */ 51,117,42,-12,51,-61,111,-127, 
  /* [16][0][][] */ -127,-107,-80,70,-33,34,-23,91, 
  /* [17][0][][] */ -38,-126,-127,105,-71,72,-43,92, 
  /* [18][0][][] */ -111,-97,-48,94,-22,75,9,127, 
  /* [19][0][][] */ 76,-127,106,-115,16,-66,35,-47, 
  /* [20][0][][] */ -17,75,46,24,45,127,81,-13, 
  /* [21][0][][] */ 24,113,54,-29,37,-78,104,-127, 
  /* [22][0][][] */ 15,7,90,18,-13,127,39,-31, 
  /* [23][0][][] */ -95,-57,37,-83,94,98,-47,-127, 
  /* [24][0][][] */ -115,-108,28,-81,106,122,-38,-127, 
  /* [25][0][][] */ 127,5,-68,-12,11,35,-56,-6, 
  /* [26][0][][] */ -127,-23,-116,-13,-37,-31,15,4, 
  /* [27][0][][] */ 93,41,8,-67,-127,-33,102,85, 
  /* [28][0][][] */ -127,-88,6,35,-61,-123,9,-13, 
  /* [29][0][][] */ 95,112,34,-127,39,21,-84,-72, 
  /* [30][0][][] */ -96,-82,40,-48,79,95,-42,-127, 
  /* [31][0][][] */ 40,38,-7,127,2,-67,13,15, 
  /* [32][0][][] */ -35,127,-16,34,8,69,-25,66, 
  /* [33][0][][] */ -29,127,-75,23,23,-38,-28,-8, 
  /* [34][0][][] */ -127,-88,-57,73,2,-3,5,104, 
  /* [35][0][][] */ -48,127,-21,-3,82,116,46,71, 
  /* [36][0][][] */ 90,42,-12,-43,-126,-31,126,127, 
  /* [37][0][][] */ -54,102,26,20,-127,108,-15,-98, 
  /* [38][0][][] */ 50,26,25,9,127,71,117,49, 
  /* [39][0][][] */ -27,-69,39,-14,5,38,-80,127, 
  /* [40][0][][] */ -79,-69,-61,127,-36,4,15,71, 
  /* [41][0][][] */ 121,15,42,127,-48,-17,2,-17, 
  /* [42][0][][] */ -48,17,-87,-127,62,-102,15,100, 
  /* [43][0][][] */ 17,2,78,-14,41,127,82,12, 
  /* [44][0][][] */ -34,-18,-69,127,54,8,-33,-34, 
  /* [45][0][][] */ 50,109,118,-127,54,-66,21,-101, 
  /* [46][0][][] */ -25,-127,-31,41,-8,32,-65,114, 
  /* [47][0][][] */ 25,58,116,-15,105,127,109,-19, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0052619590424001217, 0.0042697601020336151, 0.0030386163853108883, 0.0030961507000029087, 0.00085755792679265141, 0.0038630620110780001, 0.0053612510673701763, 0.0018684642855077982, 0.0029253445100039244, 0.0059606488794088364, 0.003077320521697402, 0.0034018708392977715, 0.0024768011644482613, 0.0040143523365259171, 0.0030468562617897987, 0.003092597471550107, 0.0023895329795777798, 0.00085233896970748901, 0.0022944877855479717, 0.0037663765251636505, 0.0036165982019156218, 0.0017805366078391671, 0.004828284028917551, 0.0030214821454137564, 0.0037489007227122784, 0.006688358262181282, 0.0036266944371163845, 0.0057603470049798489, 0.002471627201884985, 0.000949190987739712, 0.0025680335238575935, 0.0085506374016404152, 0.004058710765093565, 0.0044306237250566483, 0.0035998944658786058, 0.0033142631873488426, 0.0026286905631422997, 0.0069064698182046413, 0.0034597639460116625, 0.0056589501909911633, 0.0037849212531000376, 0.003822847967967391, 0.0035430872812867165, 0.00494418665766716, 0.0042974455282092094, 0.0026410440914332867, 0.002812475897371769, 0.0033294956665486097, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -8298, -3681, 14756, -12004, 26034, 9691, -10331, 13728, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0001733483950374648, 0.00021051759540569037, 0.00016195308126043528, 0.00020695563580375165, 0.00014834897592663765, 0.00015684455865994096, 0.00014525395818054676, 0.00021778757218271494, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -13,-7,-16,-58,-22,-35,19,-18,33,13,-30,-4,103,127,-13,-94, 
  /* [1][0][][] */ 127,-58,-42,14,-50,63,-64,-46,-40,79,-25,-47,-7,2,-59,-17, 
  /* [2][0][][] */ -39,-95,56,45,50,-67,-82,-21,28,-102,33,-127,53,-15,-73,26, 
  /* [3][0][][] */ 45,11,11,11,-19,78,-48,-27,127,41,13,17,-1,-19,11,20, 
  /* [4][0][][] */ -98,-28,-21,-127,-3,43,59,-116,21,-23,-38,-30,-113,23,-32,-17, 
  /* [5][0][][] */ 85,62,74,-21,41,-57,-127,-122,-28,-77,68,60,-69,60,76,-44, 
  /* [6][0][][] */ 113,35,-125,-69,22,-80,5,-97,-43,21,-127,90,88,-79,1,65, 
  /* [7][0][][] */ -127,-9,107,-25,-69,0,-9,-64,-56,67,82,-39,59,-23,25,29, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0086565231904387474, 0.010512647219002247, 0.0080874739214777946, 0.010334772989153862, 0.007408123929053545, 0.0078323688358068466, 0.0072535676881670952, 0.01087568886578083, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 19185, -310, 415, 3298, -785, -105, 11806, 1065, -996, 136, -2075, 3336, 3484, -812, -402, -1177, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00012319805682636797, 0.00021606829250231385, 0.00016016479639802128, 0.0001769299415173009, 0.0010956065962091088, 0.00090982241090387106, 0.00012698615319095552, 0.00099755404517054558, 0.00038175625377334654, 0.0012583379866555333, 0.000259795953752473, 0.00017139915144070983, 8.3595165051519871e-05, 0.00025381104205735028, 0.00022513455769512802, 0.00048572765081189573, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -2,-13,2,2,-19,13,13,16,-8,-11,-3,-5,7,-9,-6,-5, 3,-13,-2,2,14,0,18,-26,-10,9,-5,91,-12,19,3,-5, -1,-9,-7,0,-2,-11,-2,11,1,2,-5,-21,4,-6,-7,-5, 
  /* [0][1][][] */ 18,-18,9,1,127,-21,-127,-21,127,127,-5,-2,123,-25,-3,-24, -127,127,127,-3,-89,-88,-14,-101,14,-105,127,127,127,127,127,127, 19,-10,-7,-2,-14,127,3,-10,-3,-12,-6,-13,14,-4,-20,-13, 
  /* [0][2][][] */ 4,-12,-3,-17,-17,18,63,7,-10,-7,-3,4,-3,0,-14,-16, 22,-23,-8,-127,8,-13,-4,127,-8,1,-2,-27,-17,-58,-15,-41, 2,-13,-7,-6,0,-2,1,-2,-1,2,-7,-7,3,-5,-16,-16, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0053520654328167439, 0.0093866065144538879, 0.0069580031558871269, 0.0076863276772201061, 0.047596193850040436, 0.039525210857391357, 0.0055166310630738735, 0.043336518108844757, 0.016584550961852074, 0.054665695875883102, 0.011286257766187191, 0.0074460553005337715, 0.0036316059995442629, 0.011026256717741489, 0.0097804702818393707, 0.021101357415318489, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { 37, 699, 527, 4432, 60270, 50459, 7639, 12324, 8358, 16367, 1848, -829, 10176, 15531, -360, 33422, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00014456467761192471, 0.00025776476832106709, 0.0001427226816304028, 0.00011745841766241938, 2.1429716070997529e-05, 2.8578770070453174e-05, 8.6397740233223885e-05, 2.1637561076204292e-05, 0.00011028234439436346, 2.8182781534269452e-05, 0.00019894054275937378, 0.00022167968563735485, 0.00014973615179769695, 1.3454101463139523e-05, 0.00019139568030368537, 2.5560730136930943e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -82, -106, -28, 
  /* [0][1][][] */ 67, -35, 18, 
  /* [0][2][][] */ 33, 127, 21, 
  /* [1][0][][] */ 105, -95, -11, 
  /* [1][1][][] */ -127, 104, 23, 
  /* [1][2][][] */ 14, -1, -12, 
  /* [2][0][][] */ -24, -3, -49, 
  /* [2][1][][] */ 36, 96, 127, 
  /* [2][2][][] */ -12, -95, -81, 
  /* [3][0][][] */ 111, 117, 52, 
  /* [3][1][][] */ -3, -25, -18, 
  /* [3][2][][] */ -102, -127, -46, 
  /* [4][0][][] */ 28, -57, 9, 
  /* [4][1][][] */ 17, -127, 11, 
  /* [4][2][][] */ 20, -72, -3, 
  /* [5][0][][] */ -57, 17, 5, 
  /* [5][1][][] */ -127, 22, 7, 
  /* [5][2][][] */ -83, 16, 5, 
  /* [6][0][][] */ -15, 80, 127, 
  /* [6][1][][] */ -49, 56, -14, 
  /* [6][2][][] */ -34, -50, -86, 
  /* [7][0][][] */ 35, 22, -27, 
  /* [7][1][][] */ 127, 87, 2, 
  /* [7][2][][] */ 45, 14, -17, 
  /* [8][0][][] */ -23, -33, 51, 
  /* [8][1][][] */ -57, -91, 127, 
  /* [8][2][][] */ -29, -64, 96, 
  /* [9][0][][] */ -28, 48, -15, 
  /* [9][1][][] */ -21, 127, -17, 
  /* [9][2][][] */ -12, 87, -11, 
  /* [10][0][][] */ 26, 89, 13, 
  /* [10][1][][] */ -36, -127, -28, 
  /* [10][2][][] */ 13, 42, 19, 
  /* [11][0][][] */ 8, -17, 10, 
  /* [11][1][][] */ 65, -91, 35, 
  /* [11][2][][] */ -82, 127, -44, 
  /* [12][0][][] */ -39, 52, -8, 
  /* [12][1][][] */ -127, 118, 8, 
  /* [12][2][][] */ -78, 82, 7, 
  /* [13][0][][] */ 59, 6, -10, 
  /* [13][1][][] */ 127, 93, 2, 
  /* [13][2][][] */ 83, 113, 51, 
  /* [14][0][][] */ -30, -27, 48, 
  /* [14][1][][] */ 45, 99, -127, 
  /* [14][2][][] */ -16, -70, 82, 
  /* [15][0][][] */ -80, -13, 40, 
  /* [15][1][][] */ -127, -123, 37, 
  /* [15][2][][] */ -42, -101, -24, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.038214694708585739, 0.068138368427753448, 0.037727773189544678, 0.031049337238073349, 0.0056648002937436104, 0.0075546042062342167, 0.022838657721877098, 0.0057197427377104759, 0.029152389615774155, 0.0074499272741377354, 0.052588585764169693, 0.058599524199962616, 0.039581738412380219, 0.0035565006546676159, 0.050594151020050049, 0.0067568058148026466, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023018786683678627, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.02002517506480217, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.049004837870597839, } };
const TfArray<1, int> quant46_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.036761540919542313, } };
const TfArray<1, int> quant50_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.036391954869031906, } };
const TfArray<1, int> quant53_zero = { 1, { -33 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.055125351995229721, } };
const TfArray<1, int> quant54_zero = { 1, { -50 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.014838668517768383, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.031798627227544785, } };
const TfArray<1, int> quant58_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.014633020386099815, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.039374053478240967, } };
const TfArray<1, int> quant61_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.061960529536008835, } };
const TfArray<1, int> quant62_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.019523510709404945, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.040013488382101059, } };
const TfArray<1, int> quant65_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.078824982047080994, } };
const TfArray<1, int> quant66_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.020005835220217705, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.034606523811817169, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.061800848692655563, } };
const TfArray<1, int> quant69_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
